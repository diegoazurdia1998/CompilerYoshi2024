0
	0 SSymbol -> program [initial_action] at(0,program) [$]
	1 program -> PROGRAM identifier ; block . [save_program] at(0,PROGRAM) [$]
1
	0 SSymbol -> program [initial_action] at(1,) [$]
2
	0 program -> PROGRAM identifier ; block . [save_program] at(1,identifier) [$]
3
	0 program -> PROGRAM identifier ; block . [save_program] at(2,;) [$]
4
	0 program -> PROGRAM identifier ; block . [save_program] at(3,block) [$]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [.]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [.]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [.,;]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
5
	0 program -> PROGRAM identifier ; block . [save_program] at(4,.) [$]
6
	0 block -> declarations compound_statement [save_block,setscope_global] at(1,compound_statement) [.]
	1 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [.,;]
7
	0 block -> declarations compound_statement [save_block,setscope_global] at(1,compound_statement) [.]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [BEGIN]
	2 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [.,;]
8
	0 declarations -> var_declaration declarations [save_declarations] at(1,declarations) [BEGIN]
	1 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	2 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	3 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(1)] at(2,) [BEGIN]
	4 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	5 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	6 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	7 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
9
	0 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(1,declarations) [BEGIN]
	1 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	2 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure,reduce_epsilon(1)] at(2,) [BEGIN]
	4 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	5 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	6 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	7 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
10
	0 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(2,) [.]
11
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(1,identifier) [VAR,PROCEDURE,BEGIN]
12
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(1,identifier) [VAR,PROCEDURE,BEGIN]
13
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(1,statement_list) [.,;]
	1 statement_list -> statement [save_statement_list] at(0,statement) [END]
	2 statement_list -> statement statement_list_ext [save_statement_list] at(0,statement) [END]
	3 statement -> assignment [save_statement] at(0,assignment) [END,;]
	4 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [END,;]
14
	0 program -> PROGRAM identifier ; block . [save_program] at(5,) [$]
15
	0 block -> declarations compound_statement [save_block,setscope_global] at(2,) [.]
16
	0 declarations -> var_declaration declarations [save_declarations] at(2,) [BEGIN]
17
	0 declarations -> var_declaration declarations [save_declarations] at(2,) [BEGIN]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [BEGIN]
18
	0 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(2,) [BEGIN]
19
	0 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(2,) [BEGIN]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [BEGIN]
20
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(2,:) [VAR,PROCEDURE,BEGIN]
21
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(2,() [VAR,PROCEDURE,BEGIN]
22
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(2,END) [.,;]
23
	0 statement_list -> statement [save_statement_list] at(1,) [END]
24
	0 statement_list -> statement [save_statement_list] at(1,) [END]
	1 statement_list -> statement statement_list_ext [save_statement_list] at(1,statement_list_ext) [END]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [END]
	3 statement_list -> statement statement_list_ext [save_statement_list,reduce_epsilon(1)] at(2,) [END]
25
	0 statement -> assignment [save_statement] at(1,) [END,;]
26
	0 assignment -> identifier := expression [save_assignment,assign_value] at(1,:=) [END,;]
27
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(3,type) [VAR,PROCEDURE,BEGIN]
	1 type -> INTEGER [save_type] at(0,INTEGER) [;]
	2 type -> REAL [save_type] at(0,REAL) [;]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [;]
	4 type -> STRING [save_type] at(0,STRING) [;]
28
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(3,parameter_list) [VAR,PROCEDURE,BEGIN]
	1 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(0,identifier) [)]
	2 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(4,)) [VAR,PROCEDURE,BEGIN]
29
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(3,) [.,;]
30
	0 statement_list -> statement statement_list_ext [save_statement_list] at(2,) [END]
31
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(1,statement) [END]
	1 statement -> assignment [save_statement] at(0,assignment) [;,END]
	2 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [END,;]
32
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [END,;]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [END,;]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [=,<>,<,<=,>,>=,END,;,)]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [END,;]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [=,<>,<,<=,>,>=,END,;,)]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END,;,)]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [END,;]
	8 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	12 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	13 additive_operator -> + [save_operator] at(0,+) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	14 additive_operator -> - [save_operator] at(0,-) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	15 additive_operator -> OR [save_operator] at(0,OR) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	16 relational_operator -> = [save_operator] at(0,=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	17 relational_operator -> <> [save_operator] at(0,<>) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	18 relational_operator -> < [save_operator] at(0,<) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	19 relational_operator -> <= [save_operator] at(0,<=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	20 relational_operator -> > [save_operator] at(0,>) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	21 relational_operator -> >= [save_operator] at(0,>=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	24 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
33
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(4,;) [VAR,PROCEDURE,BEGIN]
34
	0 type -> INTEGER [save_type] at(1,) [;]
35
	0 type -> REAL [save_type] at(1,) [;]
36
	0 type -> BOOLEAN' [save_type] at(1,) [;]
37
	0 type -> STRING [save_type] at(1,) [;]
38
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(4,)) [VAR,PROCEDURE,BEGIN]
39
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(1,:) [)]
40
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(5,;) [VAR,PROCEDURE,BEGIN]
41
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(2,statement_list_ext) [END]
	1 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [END]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext,reduce_epsilon(2)] at(3,) [END]
42
	0 assignment -> identifier := expression [save_assignment,assign_value] at(3,) [END,;]
43
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [END,;]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END,;,)]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [END,;]
	3 relational_operator -> = [save_operator] at(0,=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	4 relational_operator -> <> [save_operator] at(0,<>) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	5 relational_operator -> < [save_operator] at(0,<) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	6 relational_operator -> <= [save_operator] at(0,<=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	7 relational_operator -> > [save_operator] at(0,>) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	8 relational_operator -> >= [save_operator] at(0,>=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
44
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [=,<>,<,<=,>,>=,END,;,)]
	1 additive_operator -> + [save_operator] at(0,+) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	2 additive_operator -> - [save_operator] at(0,-) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	3 additive_operator -> OR [save_operator] at(0,OR) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
45
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [END,;]
46
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 multiplicative_operator -> * [save_operator] at(0,*) [(,identifier,number,TRUE,FALSE,"]
	2 multiplicative_operator -> / [save_operator] at(0,/) [(,identifier,number,TRUE,FALSE,"]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [(,identifier,number,TRUE,FALSE,"]
47
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [=,<>,<,<=,>,>=,END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0),reduce_epsilon(2)] at(3,) [=,<>,<,<=,>,>=,END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
48
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [END,;,)]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END,;,)]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [END,;,)]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END,;,)]
	5 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 additive_operator -> + [save_operator] at(0,+) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	11 additive_operator -> - [save_operator] at(0,-) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	12 additive_operator -> OR [save_operator] at(0,OR) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	15 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
49
	0 factor -> ( expression ) [save_factor] at(1,expression) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [)]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [=,<>,<,<=,>,>=,END,;,)]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [)]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [=,<>,<,<=,>,>=,END,;,)]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END,;,)]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [)]
	8 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	12 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	13 additive_operator -> + [save_operator] at(0,+) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	14 additive_operator -> - [save_operator] at(0,-) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	15 additive_operator -> OR [save_operator] at(0,OR) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
	16 relational_operator -> = [save_operator] at(0,=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	17 relational_operator -> <> [save_operator] at(0,<>) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	18 relational_operator -> < [save_operator] at(0,<) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	19 relational_operator -> <= [save_operator] at(0,<=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	20 relational_operator -> > [save_operator] at(0,>) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	21 relational_operator -> >= [save_operator] at(0,>=) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	24 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
50
	0 factor -> identifier [save_identifier] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
51
	0 factor -> number [save_number] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
52
	0 factor -> boolean_constant [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
53
	0 factor -> string_constant [save_string] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
54
	0 additive_operator -> + [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
55
	0 additive_operator -> - [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
56
	0 additive_operator -> OR [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",=,<>,<,<=,>,>=,END,;,)]
57
	0 relational_operator -> = [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
58
	0 relational_operator -> <> [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
59
	0 relational_operator -> < [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
60
	0 relational_operator -> <= [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
61
	0 relational_operator -> > [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
62
	0 relational_operator -> >= [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,",+,-,OR,END,;,)]
63
	0 boolean_constant -> TRUE [save_boolean] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
64
	0 boolean_constant -> FALSE [save_boolean] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
65
	0 string_constant -> " str " [save_string] at(1,str) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
66
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(5,var_declaration) [VAR,PROCEDURE,BEGIN]
	1 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	2 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable,reduce_epsilon(5)] at(6,) [VAR,PROCEDURE,BEGIN]
67
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(5,;) [VAR,PROCEDURE,BEGIN]
68
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(2,type) [)]
	1 type -> INTEGER [save_type] at(0,INTEGER) [,]
	2 type -> REAL [save_type] at(0,REAL) [,]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [,]
	4 type -> STRING [save_type] at(0,STRING) [,]
69
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(6,block) [VAR,PROCEDURE,BEGIN]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [;]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [;]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [.,;]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
70
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(3,) [END]
71
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [END,;]
72
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [=,<>,<,<=,>,>=,END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(2)] at(3,) [=,<>,<,<=,>,>=,END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
73
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
74
	0 multiplicative_operator -> * [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,"]
75
	0 multiplicative_operator -> / [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,"]
76
	0 multiplicative_operator -> AND [save_operator] at(1,) [(,identifier,number,TRUE,FALSE,"]
77
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [=,<>,<,<=,>,>=,END,;,)]
78
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [END,;,)]
79
	0 factor -> ( expression ) [save_factor] at(2,)) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
80
	0 string_constant -> " str " [save_string] at(2,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
81
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(6,) [VAR,PROCEDURE,BEGIN]
82
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(6,block) [VAR,PROCEDURE,BEGIN]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [;]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [;]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [.,;]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
83
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(3,parameter_list_ext) [)]
	1 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(0,,) [)]
84
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(7,;) [VAR,PROCEDURE,BEGIN]
85
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [=,<>,<,<=,>,>=,END,;,)]
86
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
87
	0 factor -> ( expression ) [save_factor] at(3,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
88
	0 string_constant -> " str " [save_string] at(3,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
89
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(7,;) [VAR,PROCEDURE,BEGIN]
90
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(4,) [)]
91
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(1,identifier) [)]
92
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(8,) [VAR,PROCEDURE,BEGIN]
93
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(8,) [VAR,PROCEDURE,BEGIN]
94
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(2,:) [)]
95
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(3,type) [)]
	1 type -> INTEGER [save_type] at(0,INTEGER) [,]
	2 type -> REAL [save_type] at(0,REAL) [,]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [,]
	4 type -> STRING [save_type] at(0,STRING) [,]
96
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(4,parameter_list_ext) [)]
	1 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(0,,) [)]
97
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(5,) [)]
98
	0 program -> PROGRAM identifier ; block . [save_program] at(3,block) [$]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [$]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [$]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [$]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [$]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [$]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [$]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [$]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [$]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [$]
99
	0 block -> declarations compound_statement [save_block,setscope_global] at(1,compound_statement) [.]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [BEGIN]
	2 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [.]
100
	0 declarations -> var_declaration declarations [save_declarations] at(1,declarations) [BEGIN]
	1 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	2 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	3 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(1)] at(2,) [BEGIN]
	4 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [BEGIN]
	5 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	6 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [BEGIN]
	7 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
101
	0 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(1,declarations) [BEGIN]
	1 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	2 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure,reduce_epsilon(1)] at(2,) [BEGIN]
	4 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [BEGIN]
	5 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	6 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [BEGIN]
	7 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
102
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(1,statement_list) [.,;]
	1 statement_list -> statement [save_statement_list] at(0,statement) [.,;]
	2 statement_list -> statement statement_list_ext [save_statement_list] at(0,statement) [.,;]
	3 statement -> assignment [save_statement] at(0,assignment) [.,;]
	4 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [.,;]
103
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(3,type) [VAR,PROCEDURE,BEGIN]
	1 type -> INTEGER [save_type] at(0,INTEGER) [VAR,PROCEDURE,BEGIN]
	2 type -> REAL [save_type] at(0,REAL) [VAR,PROCEDURE,BEGIN]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [VAR,PROCEDURE,BEGIN]
	4 type -> STRING [save_type] at(0,STRING) [VAR,PROCEDURE,BEGIN]
104
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(3,parameter_list) [VAR,PROCEDURE,BEGIN]
	1 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(0,identifier) [VAR,PROCEDURE,BEGIN]
	2 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(4,)) [VAR,PROCEDURE,BEGIN]
105
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(1,statement) [END]
	1 statement -> assignment [save_statement] at(0,assignment) [END]
	2 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [END]
106
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [END,;]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [END,;]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END,;]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [END,;]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END,;]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END,;]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [END,;]
	8 factor -> ( expression ) [save_factor] at(0,() [END,;]
	9 factor -> identifier [save_identifier] at(0,identifier) [END,;]
	10 factor -> number [save_number] at(0,number) [END,;]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;]
	12 factor -> string_constant [save_string] at(0,string_constant) [END,;]
	13 additive_operator -> + [save_operator] at(0,+) [END,;]
	14 additive_operator -> - [save_operator] at(0,-) [END,;]
	15 additive_operator -> OR [save_operator] at(0,OR) [END,;]
	16 relational_operator -> = [save_operator] at(0,=) [END,;]
	17 relational_operator -> <> [save_operator] at(0,<>) [END,;]
	18 relational_operator -> < [save_operator] at(0,<) [END,;]
	19 relational_operator -> <= [save_operator] at(0,<=) [END,;]
	20 relational_operator -> > [save_operator] at(0,>) [END,;]
	21 relational_operator -> >= [save_operator] at(0,>=) [END,;]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;]
	24 string_constant -> " str " [save_string] at(0,") [END,;]
107
	0 statement -> assignment [save_statement] at(1,) [;,END]
108
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [END,;]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END,;]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [END,;]
	3 relational_operator -> = [save_operator] at(0,=) [END,;]
	4 relational_operator -> <> [save_operator] at(0,<>) [END,;]
	5 relational_operator -> < [save_operator] at(0,<) [END,;]
	6 relational_operator -> <= [save_operator] at(0,<=) [END,;]
	7 relational_operator -> > [save_operator] at(0,>) [END,;]
	8 relational_operator -> >= [save_operator] at(0,>=) [END,;]
109
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [=,<>,<,<=,>,>=,END,;,)]
	1 additive_operator -> + [save_operator] at(0,+) [=,<>,<,<=,>,>=,END,;,)]
	2 additive_operator -> - [save_operator] at(0,-) [=,<>,<,<=,>,>=,END,;,)]
	3 additive_operator -> OR [save_operator] at(0,OR) [=,<>,<,<=,>,>=,END,;,)]
110
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 multiplicative_operator -> * [save_operator] at(0,*) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 multiplicative_operator -> / [save_operator] at(0,/) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
111
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [=,<>,<,<=,>,>=,END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [=,<>,<,<=,>,>=,END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [=,<>,<,<=,>,>=,END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [=,<>,<,<=,>,>=,END,;,)]
	5 factor -> number [save_number] at(0,number) [=,<>,<,<=,>,>=,END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [=,<>,<,<=,>,>=,END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [=,<>,<,<=,>,>=,END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [=,<>,<,<=,>,>=,END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [=,<>,<,<=,>,>=,END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [=,<>,<,<=,>,>=,END,;,)]
112
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [END,;,)]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END,;,)]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [END,;,)]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;,)]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END,;,)]
	5 factor -> ( expression ) [save_factor] at(0,() [END,;,)]
	6 factor -> identifier [save_identifier] at(0,identifier) [END,;,)]
	7 factor -> number [save_number] at(0,number) [END,;,)]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;,)]
	9 factor -> string_constant [save_string] at(0,string_constant) [END,;,)]
	10 additive_operator -> + [save_operator] at(0,+) [END,;,)]
	11 additive_operator -> - [save_operator] at(0,-) [END,;,)]
	12 additive_operator -> OR [save_operator] at(0,OR) [END,;,)]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;,)]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;,)]
	15 string_constant -> " str " [save_string] at(0,") [END,;,)]
113
	0 factor -> ( expression ) [save_factor] at(1,expression) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	12 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	13 additive_operator -> + [save_operator] at(0,+) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	14 additive_operator -> - [save_operator] at(0,-) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	15 additive_operator -> OR [save_operator] at(0,OR) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	16 relational_operator -> = [save_operator] at(0,=) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	17 relational_operator -> <> [save_operator] at(0,<>) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	18 relational_operator -> < [save_operator] at(0,<) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	19 relational_operator -> <= [save_operator] at(0,<=) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	20 relational_operator -> > [save_operator] at(0,>) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	21 relational_operator -> >= [save_operator] at(0,>=) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	24 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
114
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(2,type) [)]
	1 type -> INTEGER [save_type] at(0,INTEGER) [)]
	2 type -> REAL [save_type] at(0,REAL) [)]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [)]
	4 type -> STRING [save_type] at(0,STRING) [)]
115
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(6,block) [VAR,PROCEDURE,BEGIN]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [VAR,PROCEDURE,BEGIN]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [VAR,PROCEDURE,BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [VAR,PROCEDURE,BEGIN]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [VAR,PROCEDURE,BEGIN]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [VAR,PROCEDURE,BEGIN]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [VAR,PROCEDURE,BEGIN]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
116
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [=,<>,<,<=,>,>=,END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [=,<>,<,<=,>,>=,END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [=,<>,<,<=,>,>=,END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [=,<>,<,<=,>,>=,END,;,)]
	5 factor -> number [save_number] at(0,number) [=,<>,<,<=,>,>=,END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [=,<>,<,<=,>,>=,END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [=,<>,<,<=,>,>=,END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [=,<>,<,<=,>,>=,END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [=,<>,<,<=,>,>=,END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [=,<>,<,<=,>,>=,END,;,)]
117
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 factor -> ( expression ) [save_factor] at(0,() [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 factor -> identifier [save_identifier] at(0,identifier) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 factor -> number [save_number] at(0,number) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> string_constant [save_string] at(0,string_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 string_constant -> " str " [save_string] at(0,") [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
118
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [END,;,)]
	1 additive_operator -> + [save_operator] at(0,+) [END,;,)]
	2 additive_operator -> - [save_operator] at(0,-) [END,;,)]
	3 additive_operator -> OR [save_operator] at(0,OR) [END,;,)]
119
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [END,;,)]
	5 factor -> number [save_number] at(0,number) [END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [END,;,)]
120
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [)]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [)]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [)]
	3 relational_operator -> = [save_operator] at(0,=) [)]
	4 relational_operator -> <> [save_operator] at(0,<>) [)]
	5 relational_operator -> < [save_operator] at(0,<) [)]
	6 relational_operator -> <= [save_operator] at(0,<=) [)]
	7 relational_operator -> > [save_operator] at(0,>) [)]
	8 relational_operator -> >= [save_operator] at(0,>=) [)]
121
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [)]
122
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(6,block) [VAR,PROCEDURE,BEGIN]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [VAR,PROCEDURE,BEGIN]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [VAR,PROCEDURE,BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [VAR,PROCEDURE,BEGIN]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [VAR,PROCEDURE,BEGIN]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [VAR,PROCEDURE,BEGIN]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [VAR,PROCEDURE,BEGIN]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
123
	0 type -> INTEGER [save_type] at(1,) [,]
124
	0 type -> REAL [save_type] at(1,) [,]
125
	0 type -> BOOLEAN' [save_type] at(1,) [,]
126
	0 type -> STRING [save_type] at(1,) [,]
127
	0 block -> declarations compound_statement [save_block,setscope_global] at(1,compound_statement) [;]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [BEGIN]
	2 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [;]
128
	0 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(2,) [;]
129
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(3,type) [)]
	1 type -> INTEGER [save_type] at(0,INTEGER) [)]
	2 type -> REAL [save_type] at(0,REAL) [)]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [)]
	4 type -> STRING [save_type] at(0,STRING) [)]
130
	0 block -> declarations compound_statement [save_block,setscope_global] at(1,compound_statement) [$]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [$]
	2 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [$]
131
	0 declarations -> var_declaration declarations [save_declarations] at(1,declarations) [$]
	1 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [$]
	2 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [$]
	3 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(1)] at(2,) [$]
	4 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [$]
	5 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [$]
	6 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [$]
	7 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [$]
132
	0 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(1,declarations) [$]
	1 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [$]
	2 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [$]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure,reduce_epsilon(1)] at(2,) [$]
	4 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [$]
	5 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [$]
	6 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [$]
	7 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [$]
133
	0 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(2,) [$]
134
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(1,identifier) [$]
135
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(1,identifier) [$]
136
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(1,statement_list) [$]
	1 statement_list -> statement [save_statement_list] at(0,statement) [$]
	2 statement_list -> statement statement_list_ext [save_statement_list] at(0,statement) [$]
	3 statement -> assignment [save_statement] at(0,assignment) [$]
	4 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [$]
137
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(1,statement_list) [.]
	1 statement_list -> statement [save_statement_list] at(0,statement) [.]
	2 statement_list -> statement statement_list_ext [save_statement_list] at(0,statement) [.]
	3 statement -> assignment [save_statement] at(0,assignment) [.]
	4 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [.]
138
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(1,identifier) [BEGIN]
139
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(1,identifier) [BEGIN]
140
	0 statement_list -> statement [save_statement_list] at(1,) [.,;]
	1 statement_list -> statement statement_list_ext [save_statement_list] at(1,statement_list_ext) [.,;]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [.,;]
	3 statement_list -> statement statement_list_ext [save_statement_list,reduce_epsilon(1)] at(2,) [.,;]
141
	0 statement -> assignment [save_statement] at(1,) [.,;]
142
	0 assignment -> identifier := expression [save_assignment,assign_value] at(1,:=) [.,;]
143
	0 type -> INTEGER [save_type] at(1,) [VAR,PROCEDURE,BEGIN]
144
	0 type -> REAL [save_type] at(1,) [VAR,PROCEDURE,BEGIN]
145
	0 type -> BOOLEAN' [save_type] at(1,) [VAR,PROCEDURE,BEGIN]
146
	0 type -> STRING [save_type] at(1,) [VAR,PROCEDURE,BEGIN]
147
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(1,:) [VAR,PROCEDURE,BEGIN]
148
	0 statement -> assignment [save_statement] at(1,) [END]
149
	0 assignment -> identifier := expression [save_assignment,assign_value] at(1,:=) [END]
150
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [END,;]
	1 additive_operator -> + [save_operator] at(0,+) [END,;]
	2 additive_operator -> - [save_operator] at(0,-) [END,;]
	3 additive_operator -> OR [save_operator] at(0,OR) [END,;]
151
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [END,;]
	1 multiplicative_operator -> * [save_operator] at(0,*) [END,;]
	2 multiplicative_operator -> / [save_operator] at(0,/) [END,;]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [END,;]
152
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [END,;]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END,;]
	3 factor -> ( expression ) [save_factor] at(0,() [END,;]
	4 factor -> identifier [save_identifier] at(0,identifier) [END,;]
	5 factor -> number [save_number] at(0,number) [END,;]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;]
	7 factor -> string_constant [save_string] at(0,string_constant) [END,;]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;]
	10 string_constant -> " str " [save_string] at(0,") [END,;]
153
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [END,;]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END,;]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [END,;]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END,;]
	5 factor -> ( expression ) [save_factor] at(0,() [END,;]
	6 factor -> identifier [save_identifier] at(0,identifier) [END,;]
	7 factor -> number [save_number] at(0,number) [END,;]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;]
	9 factor -> string_constant [save_string] at(0,string_constant) [END,;]
	10 additive_operator -> + [save_operator] at(0,+) [END,;]
	11 additive_operator -> - [save_operator] at(0,-) [END,;]
	12 additive_operator -> OR [save_operator] at(0,OR) [END,;]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;]
	15 string_constant -> " str " [save_string] at(0,") [END,;]
154
	0 factor -> ( expression ) [save_factor] at(1,expression) [END,;]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [END,;]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END,;]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [END,;]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END,;]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END,;]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [END,;]
	8 factor -> ( expression ) [save_factor] at(0,() [END,;]
	9 factor -> identifier [save_identifier] at(0,identifier) [END,;]
	10 factor -> number [save_number] at(0,number) [END,;]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;]
	12 factor -> string_constant [save_string] at(0,string_constant) [END,;]
	13 additive_operator -> + [save_operator] at(0,+) [END,;]
	14 additive_operator -> - [save_operator] at(0,-) [END,;]
	15 additive_operator -> OR [save_operator] at(0,OR) [END,;]
	16 relational_operator -> = [save_operator] at(0,=) [END,;]
	17 relational_operator -> <> [save_operator] at(0,<>) [END,;]
	18 relational_operator -> < [save_operator] at(0,<) [END,;]
	19 relational_operator -> <= [save_operator] at(0,<=) [END,;]
	20 relational_operator -> > [save_operator] at(0,>) [END,;]
	21 relational_operator -> >= [save_operator] at(0,>=) [END,;]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;]
	24 string_constant -> " str " [save_string] at(0,") [END,;]
155
	0 factor -> identifier [save_identifier] at(1,) [END,;]
156
	0 factor -> number [save_number] at(1,) [END,;]
157
	0 factor -> boolean_constant [save_operator] at(1,) [END,;]
158
	0 factor -> string_constant [save_string] at(1,) [END,;]
159
	0 additive_operator -> + [save_operator] at(1,) [END,;]
160
	0 additive_operator -> - [save_operator] at(1,) [END,;]
161
	0 additive_operator -> OR [save_operator] at(1,) [END,;]
162
	0 relational_operator -> = [save_operator] at(1,) [END,;]
163
	0 relational_operator -> <> [save_operator] at(1,) [END,;]
164
	0 relational_operator -> < [save_operator] at(1,) [END,;]
165
	0 relational_operator -> <= [save_operator] at(1,) [END,;]
166
	0 relational_operator -> > [save_operator] at(1,) [END,;]
167
	0 relational_operator -> >= [save_operator] at(1,) [END,;]
168
	0 boolean_constant -> TRUE [save_boolean] at(1,) [END,;]
169
	0 boolean_constant -> FALSE [save_boolean] at(1,) [END,;]
170
	0 string_constant -> " str " [save_string] at(1,str) [END,;]
171
	0 additive_operator -> + [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
172
	0 additive_operator -> - [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
173
	0 additive_operator -> OR [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
174
	0 multiplicative_operator -> * [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
175
	0 multiplicative_operator -> / [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
176
	0 multiplicative_operator -> AND [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
177
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [=,<>,<,<=,>,>=,END,;,)]
	1 multiplicative_operator -> * [save_operator] at(0,*) [=,<>,<,<=,>,>=,END,;,)]
	2 multiplicative_operator -> / [save_operator] at(0,/) [=,<>,<,<=,>,>=,END,;,)]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [=,<>,<,<=,>,>=,END,;,)]
178
	0 factor -> ( expression ) [save_factor] at(1,expression) [=,<>,<,<=,>,>=,END,;,)]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [=,<>,<,<=,>,>=,END,;,)]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [=,<>,<,<=,>,>=,END,;,)]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [=,<>,<,<=,>,>=,END,;,)]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [=,<>,<,<=,>,>=,END,;,)]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [=,<>,<,<=,>,>=,END,;,)]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [=,<>,<,<=,>,>=,END,;,)]
	8 factor -> ( expression ) [save_factor] at(0,() [=,<>,<,<=,>,>=,END,;,)]
	9 factor -> identifier [save_identifier] at(0,identifier) [=,<>,<,<=,>,>=,END,;,)]
	10 factor -> number [save_number] at(0,number) [=,<>,<,<=,>,>=,END,;,)]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [=,<>,<,<=,>,>=,END,;,)]
	12 factor -> string_constant [save_string] at(0,string_constant) [=,<>,<,<=,>,>=,END,;,)]
	13 additive_operator -> + [save_operator] at(0,+) [=,<>,<,<=,>,>=,END,;,)]
	14 additive_operator -> - [save_operator] at(0,-) [=,<>,<,<=,>,>=,END,;,)]
	15 additive_operator -> OR [save_operator] at(0,OR) [=,<>,<,<=,>,>=,END,;,)]
	16 relational_operator -> = [save_operator] at(0,=) [=,<>,<,<=,>,>=,END,;,)]
	17 relational_operator -> <> [save_operator] at(0,<>) [=,<>,<,<=,>,>=,END,;,)]
	18 relational_operator -> < [save_operator] at(0,<) [=,<>,<,<=,>,>=,END,;,)]
	19 relational_operator -> <= [save_operator] at(0,<=) [=,<>,<,<=,>,>=,END,;,)]
	20 relational_operator -> > [save_operator] at(0,>) [=,<>,<,<=,>,>=,END,;,)]
	21 relational_operator -> >= [save_operator] at(0,>=) [=,<>,<,<=,>,>=,END,;,)]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [=,<>,<,<=,>,>=,END,;,)]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [=,<>,<,<=,>,>=,END,;,)]
	24 string_constant -> " str " [save_string] at(0,") [=,<>,<,<=,>,>=,END,;,)]
179
	0 factor -> identifier [save_identifier] at(1,) [=,<>,<,<=,>,>=,END,;,)]
180
	0 factor -> number [save_number] at(1,) [=,<>,<,<=,>,>=,END,;,)]
181
	0 factor -> boolean_constant [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
182
	0 factor -> string_constant [save_string] at(1,) [=,<>,<,<=,>,>=,END,;,)]
183
	0 boolean_constant -> TRUE [save_boolean] at(1,) [=,<>,<,<=,>,>=,END,;,)]
184
	0 boolean_constant -> FALSE [save_boolean] at(1,) [=,<>,<,<=,>,>=,END,;,)]
185
	0 string_constant -> " str " [save_string] at(1,str) [=,<>,<,<=,>,>=,END,;,)]
186
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [END,;,)]
	1 multiplicative_operator -> * [save_operator] at(0,*) [END,;,)]
	2 multiplicative_operator -> / [save_operator] at(0,/) [END,;,)]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [END,;,)]
187
	0 factor -> ( expression ) [save_factor] at(1,expression) [END,;,)]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END,;,)]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [END,;,)]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;,)]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END,;,)]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END,;,)]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [END,;,)]
	8 factor -> ( expression ) [save_factor] at(0,() [END,;,)]
	9 factor -> identifier [save_identifier] at(0,identifier) [END,;,)]
	10 factor -> number [save_number] at(0,number) [END,;,)]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;,)]
	12 factor -> string_constant [save_string] at(0,string_constant) [END,;,)]
	13 additive_operator -> + [save_operator] at(0,+) [END,;,)]
	14 additive_operator -> - [save_operator] at(0,-) [END,;,)]
	15 additive_operator -> OR [save_operator] at(0,OR) [END,;,)]
	16 relational_operator -> = [save_operator] at(0,=) [END,;,)]
	17 relational_operator -> <> [save_operator] at(0,<>) [END,;,)]
	18 relational_operator -> < [save_operator] at(0,<) [END,;,)]
	19 relational_operator -> <= [save_operator] at(0,<=) [END,;,)]
	20 relational_operator -> > [save_operator] at(0,>) [END,;,)]
	21 relational_operator -> >= [save_operator] at(0,>=) [END,;,)]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;,)]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;,)]
	24 string_constant -> " str " [save_string] at(0,") [END,;,)]
188
	0 factor -> identifier [save_identifier] at(1,) [END,;,)]
189
	0 factor -> number [save_number] at(1,) [END,;,)]
190
	0 factor -> boolean_constant [save_operator] at(1,) [END,;,)]
191
	0 factor -> string_constant [save_string] at(1,) [END,;,)]
192
	0 additive_operator -> + [save_operator] at(1,) [END,;,)]
193
	0 additive_operator -> - [save_operator] at(1,) [END,;,)]
194
	0 additive_operator -> OR [save_operator] at(1,) [END,;,)]
195
	0 boolean_constant -> TRUE [save_boolean] at(1,) [END,;,)]
196
	0 boolean_constant -> FALSE [save_boolean] at(1,) [END,;,)]
197
	0 string_constant -> " str " [save_string] at(1,str) [END,;,)]
198
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 relational_operator -> = [save_operator] at(0,=) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 relational_operator -> <> [save_operator] at(0,<>) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 relational_operator -> < [save_operator] at(0,<) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 relational_operator -> <= [save_operator] at(0,<=) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 relational_operator -> > [save_operator] at(0,>) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 relational_operator -> >= [save_operator] at(0,>=) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
199
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 additive_operator -> + [save_operator] at(0,+) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 additive_operator -> - [save_operator] at(0,-) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 additive_operator -> OR [save_operator] at(0,OR) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
200
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
201
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 multiplicative_operator -> * [save_operator] at(0,*) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 multiplicative_operator -> / [save_operator] at(0,/) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
202
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
203
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 additive_operator -> + [save_operator] at(0,+) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	11 additive_operator -> - [save_operator] at(0,-) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	12 additive_operator -> OR [save_operator] at(0,OR) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	15 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
204
	0 additive_operator -> + [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
205
	0 additive_operator -> - [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
206
	0 additive_operator -> OR [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
207
	0 relational_operator -> = [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
208
	0 relational_operator -> <> [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
209
	0 relational_operator -> < [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
210
	0 relational_operator -> <= [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
211
	0 relational_operator -> > [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
212
	0 relational_operator -> >= [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
213
	0 type -> INTEGER [save_type] at(1,) [)]
214
	0 type -> REAL [save_type] at(1,) [)]
215
	0 type -> BOOLEAN' [save_type] at(1,) [)]
216
	0 type -> STRING [save_type] at(1,) [)]
217
	0 block -> declarations compound_statement [save_block,setscope_global] at(1,compound_statement) [VAR,PROCEDURE,BEGIN]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [VAR,PROCEDURE,BEGIN]
	2 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [VAR,PROCEDURE,BEGIN]
218
	0 declarations -> var_declaration declarations [save_declarations] at(1,declarations) [VAR,PROCEDURE,BEGIN]
	1 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [VAR,PROCEDURE,BEGIN]
	2 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [VAR,PROCEDURE,BEGIN]
	3 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
	4 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	5 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [VAR,PROCEDURE,BEGIN]
	6 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	7 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
219
	0 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(1,declarations) [VAR,PROCEDURE,BEGIN]
	1 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [VAR,PROCEDURE,BEGIN]
	2 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [VAR,PROCEDURE,BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure,reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
	4 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [VAR,PROCEDURE,BEGIN]
	5 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [VAR,PROCEDURE,BEGIN]
	6 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [VAR,PROCEDURE,BEGIN]
	7 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
220
	0 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(2,) [VAR,PROCEDURE,BEGIN]
221
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(1,statement_list) [VAR,PROCEDURE,BEGIN]
	1 statement_list -> statement [save_statement_list] at(0,statement) [VAR,PROCEDURE,BEGIN]
	2 statement_list -> statement statement_list_ext [save_statement_list] at(0,statement) [VAR,PROCEDURE,BEGIN]
	3 statement -> assignment [save_statement] at(0,assignment) [VAR,PROCEDURE,BEGIN]
	4 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [VAR,PROCEDURE,BEGIN]
222
	0 factor -> ( expression ) [save_factor] at(1,expression) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 factor -> ( expression ) [save_factor] at(0,() [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 factor -> identifier [save_identifier] at(0,identifier) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 factor -> number [save_number] at(0,number) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	12 factor -> string_constant [save_string] at(0,string_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	13 additive_operator -> + [save_operator] at(0,+) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	14 additive_operator -> - [save_operator] at(0,-) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	15 additive_operator -> OR [save_operator] at(0,OR) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	16 relational_operator -> = [save_operator] at(0,=) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	17 relational_operator -> <> [save_operator] at(0,<>) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	18 relational_operator -> < [save_operator] at(0,<) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	19 relational_operator -> <= [save_operator] at(0,<=) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	20 relational_operator -> > [save_operator] at(0,>) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	21 relational_operator -> >= [save_operator] at(0,>=) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	24 string_constant -> " str " [save_string] at(0,") [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
223
	0 factor -> identifier [save_identifier] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
224
	0 factor -> number [save_number] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
225
	0 factor -> boolean_constant [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
226
	0 factor -> string_constant [save_string] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
227
	0 boolean_constant -> TRUE [save_boolean] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
228
	0 boolean_constant -> FALSE [save_boolean] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
229
	0 string_constant -> " str " [save_string] at(1,str) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
230
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [END,;,)]
	5 factor -> number [save_number] at(0,number) [END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [END,;,)]
231
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END,;,)]
232
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [)]
233
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [)]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [)]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [)]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [)]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [)]
	5 factor -> ( expression ) [save_factor] at(0,() [)]
	6 factor -> identifier [save_identifier] at(0,identifier) [)]
	7 factor -> number [save_number] at(0,number) [)]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [)]
	9 factor -> string_constant [save_string] at(0,string_constant) [)]
	10 additive_operator -> + [save_operator] at(0,+) [)]
	11 additive_operator -> - [save_operator] at(0,-) [)]
	12 additive_operator -> OR [save_operator] at(0,OR) [)]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [)]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [)]
	15 string_constant -> " str " [save_string] at(0,") [)]
234
	0 relational_operator -> = [save_operator] at(1,) [)]
235
	0 relational_operator -> <> [save_operator] at(1,) [)]
236
	0 relational_operator -> < [save_operator] at(1,) [)]
237
	0 relational_operator -> <= [save_operator] at(1,) [)]
238
	0 relational_operator -> > [save_operator] at(1,) [)]
239
	0 relational_operator -> >= [save_operator] at(1,) [)]
240
	0 block -> declarations compound_statement [save_block,setscope_global] at(2,) [;]
241
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(1,statement_list) [;]
	1 statement_list -> statement [save_statement_list] at(0,statement) [;]
	2 statement_list -> statement statement_list_ext [save_statement_list] at(0,statement) [;]
	3 statement -> assignment [save_statement] at(0,assignment) [;]
	4 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [;]
242
	0 block -> declarations compound_statement [save_block,setscope_global] at(2,) [$]
243
	0 declarations -> var_declaration declarations [save_declarations] at(2,) [$]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [$]
244
	0 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(2,) [$]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [$]
245
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(2,:) [$]
246
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(2,() [$]
247
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(2,END) [$]
248
	0 statement_list -> statement [save_statement_list] at(1,) [$]
	1 statement_list -> statement statement_list_ext [save_statement_list] at(1,statement_list_ext) [$]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [$]
	3 statement_list -> statement statement_list_ext [save_statement_list,reduce_epsilon(1)] at(2,) [$]
249
	0 statement -> assignment [save_statement] at(1,) [$]
250
	0 assignment -> identifier := expression [save_assignment,assign_value] at(1,:=) [$]
251
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(2,END) [.]
252
	0 statement_list -> statement [save_statement_list] at(1,) [.]
	1 statement_list -> statement statement_list_ext [save_statement_list] at(1,statement_list_ext) [.]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [.]
	3 statement_list -> statement statement_list_ext [save_statement_list,reduce_epsilon(1)] at(2,) [.]
253
	0 statement -> assignment [save_statement] at(1,) [.]
254
	0 assignment -> identifier := expression [save_assignment,assign_value] at(1,:=) [.]
255
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(2,:) [BEGIN]
256
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(2,() [BEGIN]
257
	0 statement_list -> statement statement_list_ext [save_statement_list] at(2,) [.,;]
258
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(1,statement) [.,;]
	1 statement -> assignment [save_statement] at(0,assignment) [.,;]
	2 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [.,;]
259
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [.,;]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [.,;]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [.,;]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [.,;]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.,;]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [.,;]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [.,;]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [.,;]
	8 factor -> ( expression ) [save_factor] at(0,() [.,;]
	9 factor -> identifier [save_identifier] at(0,identifier) [.,;]
	10 factor -> number [save_number] at(0,number) [.,;]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.,;]
	12 factor -> string_constant [save_string] at(0,string_constant) [.,;]
	13 additive_operator -> + [save_operator] at(0,+) [.,;]
	14 additive_operator -> - [save_operator] at(0,-) [.,;]
	15 additive_operator -> OR [save_operator] at(0,OR) [.,;]
	16 relational_operator -> = [save_operator] at(0,=) [.,;]
	17 relational_operator -> <> [save_operator] at(0,<>) [.,;]
	18 relational_operator -> < [save_operator] at(0,<) [.,;]
	19 relational_operator -> <= [save_operator] at(0,<=) [.,;]
	20 relational_operator -> > [save_operator] at(0,>) [.,;]
	21 relational_operator -> >= [save_operator] at(0,>=) [.,;]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.,;]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.,;]
	24 string_constant -> " str " [save_string] at(0,") [.,;]
260
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(2,type) [VAR,PROCEDURE,BEGIN]
	1 type -> INTEGER [save_type] at(0,INTEGER) [VAR,PROCEDURE,BEGIN]
	2 type -> REAL [save_type] at(0,REAL) [VAR,PROCEDURE,BEGIN]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [VAR,PROCEDURE,BEGIN]
	4 type -> STRING [save_type] at(0,STRING) [VAR,PROCEDURE,BEGIN]
261
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [END]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [END]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [END]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [END]
	8 factor -> ( expression ) [save_factor] at(0,() [END]
	9 factor -> identifier [save_identifier] at(0,identifier) [END]
	10 factor -> number [save_number] at(0,number) [END]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END]
	12 factor -> string_constant [save_string] at(0,string_constant) [END]
	13 additive_operator -> + [save_operator] at(0,+) [END]
	14 additive_operator -> - [save_operator] at(0,-) [END]
	15 additive_operator -> OR [save_operator] at(0,OR) [END]
	16 relational_operator -> = [save_operator] at(0,=) [END]
	17 relational_operator -> <> [save_operator] at(0,<>) [END]
	18 relational_operator -> < [save_operator] at(0,<) [END]
	19 relational_operator -> <= [save_operator] at(0,<=) [END]
	20 relational_operator -> > [save_operator] at(0,>) [END]
	21 relational_operator -> >= [save_operator] at(0,>=) [END]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END]
	24 string_constant -> " str " [save_string] at(0,") [END]
262
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [END,;]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END,;]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END,;]
	3 factor -> ( expression ) [save_factor] at(0,() [END,;]
	4 factor -> identifier [save_identifier] at(0,identifier) [END,;]
	5 factor -> number [save_number] at(0,number) [END,;]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;]
	7 factor -> string_constant [save_string] at(0,string_constant) [END,;]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;]
	10 string_constant -> " str " [save_string] at(0,") [END,;]
263
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [END,;]
	1 factor -> ( expression ) [save_factor] at(0,() [END,;]
	2 factor -> identifier [save_identifier] at(0,identifier) [END,;]
	3 factor -> number [save_number] at(0,number) [END,;]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;]
	5 factor -> string_constant [save_string] at(0,string_constant) [END,;]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;]
	8 string_constant -> " str " [save_string] at(0,") [END,;]
264
	0 multiplicative_operator -> * [save_operator] at(1,) [END,;]
265
	0 multiplicative_operator -> / [save_operator] at(1,) [END,;]
266
	0 multiplicative_operator -> AND [save_operator] at(1,) [END,;]
267
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END,;]
268
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [END,;]
269
	0 factor -> ( expression ) [save_factor] at(2,)) [END,;]
270
	0 string_constant -> " str " [save_string] at(2,") [END,;]
271
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [=,<>,<,<=,>,>=,END,;,)]
	1 factor -> ( expression ) [save_factor] at(0,() [=,<>,<,<=,>,>=,END,;,)]
	2 factor -> identifier [save_identifier] at(0,identifier) [=,<>,<,<=,>,>=,END,;,)]
	3 factor -> number [save_number] at(0,number) [=,<>,<,<=,>,>=,END,;,)]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [=,<>,<,<=,>,>=,END,;,)]
	5 factor -> string_constant [save_string] at(0,string_constant) [=,<>,<,<=,>,>=,END,;,)]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [=,<>,<,<=,>,>=,END,;,)]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [=,<>,<,<=,>,>=,END,;,)]
	8 string_constant -> " str " [save_string] at(0,") [=,<>,<,<=,>,>=,END,;,)]
272
	0 multiplicative_operator -> * [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
273
	0 multiplicative_operator -> / [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
274
	0 multiplicative_operator -> AND [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
275
	0 factor -> ( expression ) [save_factor] at(2,)) [=,<>,<,<=,>,>=,END,;,)]
276
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [=,<>,<,<=,>,>=,END,;,)]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [=,<>,<,<=,>,>=,END,;,)]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [=,<>,<,<=,>,>=,END,;,)]
	3 relational_operator -> = [save_operator] at(0,=) [=,<>,<,<=,>,>=,END,;,)]
	4 relational_operator -> <> [save_operator] at(0,<>) [=,<>,<,<=,>,>=,END,;,)]
	5 relational_operator -> < [save_operator] at(0,<) [=,<>,<,<=,>,>=,END,;,)]
	6 relational_operator -> <= [save_operator] at(0,<=) [=,<>,<,<=,>,>=,END,;,)]
	7 relational_operator -> > [save_operator] at(0,>) [=,<>,<,<=,>,>=,END,;,)]
	8 relational_operator -> >= [save_operator] at(0,>=) [=,<>,<,<=,>,>=,END,;,)]
277
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [=,<>,<,<=,>,>=,END,;,)]
278
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [=,<>,<,<=,>,>=,END,;,)]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [=,<>,<,<=,>,>=,END,;,)]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [=,<>,<,<=,>,>=,END,;,)]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [=,<>,<,<=,>,>=,END,;,)]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [=,<>,<,<=,>,>=,END,;,)]
	5 factor -> ( expression ) [save_factor] at(0,() [=,<>,<,<=,>,>=,END,;,)]
	6 factor -> identifier [save_identifier] at(0,identifier) [=,<>,<,<=,>,>=,END,;,)]
	7 factor -> number [save_number] at(0,number) [=,<>,<,<=,>,>=,END,;,)]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [=,<>,<,<=,>,>=,END,;,)]
	9 factor -> string_constant [save_string] at(0,string_constant) [=,<>,<,<=,>,>=,END,;,)]
	10 additive_operator -> + [save_operator] at(0,+) [=,<>,<,<=,>,>=,END,;,)]
	11 additive_operator -> - [save_operator] at(0,-) [=,<>,<,<=,>,>=,END,;,)]
	12 additive_operator -> OR [save_operator] at(0,OR) [=,<>,<,<=,>,>=,END,;,)]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [=,<>,<,<=,>,>=,END,;,)]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [=,<>,<,<=,>,>=,END,;,)]
	15 string_constant -> " str " [save_string] at(0,") [=,<>,<,<=,>,>=,END,;,)]
279
	0 relational_operator -> = [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
280
	0 relational_operator -> <> [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
281
	0 relational_operator -> < [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
282
	0 relational_operator -> <= [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
283
	0 relational_operator -> > [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
284
	0 relational_operator -> >= [save_operator] at(1,) [=,<>,<,<=,>,>=,END,;,)]
285
	0 string_constant -> " str " [save_string] at(2,") [=,<>,<,<=,>,>=,END,;,)]
286
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [END,;,)]
	1 factor -> ( expression ) [save_factor] at(0,() [END,;,)]
	2 factor -> identifier [save_identifier] at(0,identifier) [END,;,)]
	3 factor -> number [save_number] at(0,number) [END,;,)]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END,;,)]
	5 factor -> string_constant [save_string] at(0,string_constant) [END,;,)]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END,;,)]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END,;,)]
	8 string_constant -> " str " [save_string] at(0,") [END,;,)]
287
	0 multiplicative_operator -> * [save_operator] at(1,) [END,;,)]
288
	0 multiplicative_operator -> / [save_operator] at(1,) [END,;,)]
289
	0 multiplicative_operator -> AND [save_operator] at(1,) [END,;,)]
290
	0 factor -> ( expression ) [save_factor] at(2,)) [END,;,)]
291
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [END,;,)]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END,;,)]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [END,;,)]
	3 relational_operator -> = [save_operator] at(0,=) [END,;,)]
	4 relational_operator -> <> [save_operator] at(0,<>) [END,;,)]
	5 relational_operator -> < [save_operator] at(0,<) [END,;,)]
	6 relational_operator -> <= [save_operator] at(0,<=) [END,;,)]
	7 relational_operator -> > [save_operator] at(0,>) [END,;,)]
	8 relational_operator -> >= [save_operator] at(0,>=) [END,;,)]
292
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [END,;,)]
293
	0 relational_operator -> = [save_operator] at(1,) [END,;,)]
294
	0 relational_operator -> <> [save_operator] at(1,) [END,;,)]
295
	0 relational_operator -> < [save_operator] at(1,) [END,;,)]
296
	0 relational_operator -> <= [save_operator] at(1,) [END,;,)]
297
	0 relational_operator -> > [save_operator] at(1,) [END,;,)]
298
	0 relational_operator -> >= [save_operator] at(1,) [END,;,)]
299
	0 string_constant -> " str " [save_string] at(2,") [END,;,)]
300
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
301
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
302
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 factor -> ( expression ) [save_factor] at(0,() [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 factor -> identifier [save_identifier] at(0,identifier) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 factor -> number [save_number] at(0,number) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> string_constant [save_string] at(0,string_constant) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 string_constant -> " str " [save_string] at(0,") [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
303
	0 multiplicative_operator -> * [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
304
	0 multiplicative_operator -> / [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
305
	0 multiplicative_operator -> AND [save_operator] at(1,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
306
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
307
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
308
	0 block -> declarations compound_statement [save_block,setscope_global] at(2,) [VAR,PROCEDURE,BEGIN]
309
	0 declarations -> var_declaration declarations [save_declarations] at(2,) [VAR,PROCEDURE,BEGIN]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [VAR,PROCEDURE,BEGIN]
310
	0 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(2,) [VAR,PROCEDURE,BEGIN]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [VAR,PROCEDURE,BEGIN]
311
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(2,END) [VAR,PROCEDURE,BEGIN]
312
	0 statement_list -> statement [save_statement_list] at(1,) [VAR,PROCEDURE,BEGIN]
	1 statement_list -> statement statement_list_ext [save_statement_list] at(1,statement_list_ext) [VAR,PROCEDURE,BEGIN]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [VAR,PROCEDURE,BEGIN]
	3 statement_list -> statement statement_list_ext [save_statement_list,reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
313
	0 statement -> assignment [save_statement] at(1,) [VAR,PROCEDURE,BEGIN]
314
	0 assignment -> identifier := expression [save_assignment,assign_value] at(1,:=) [VAR,PROCEDURE,BEGIN]
315
	0 factor -> ( expression ) [save_factor] at(2,)) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
316
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 relational_operator -> = [save_operator] at(0,=) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 relational_operator -> <> [save_operator] at(0,<>) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 relational_operator -> < [save_operator] at(0,<) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 relational_operator -> <= [save_operator] at(0,<=) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 relational_operator -> > [save_operator] at(0,>) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 relational_operator -> >= [save_operator] at(0,>=) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
317
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 additive_operator -> + [save_operator] at(0,+) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 additive_operator -> - [save_operator] at(0,-) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 additive_operator -> OR [save_operator] at(0,OR) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
318
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
319
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> number [save_number] at(0,number) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
320
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> ( expression ) [save_factor] at(0,() [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> identifier [save_identifier] at(0,identifier) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> number [save_number] at(0,number) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 factor -> string_constant [save_string] at(0,string_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 additive_operator -> + [save_operator] at(0,+) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	11 additive_operator -> - [save_operator] at(0,-) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	12 additive_operator -> OR [save_operator] at(0,OR) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	15 string_constant -> " str " [save_string] at(0,") [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
321
	0 additive_operator -> + [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
322
	0 additive_operator -> - [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
323
	0 additive_operator -> OR [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
324
	0 relational_operator -> = [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
325
	0 relational_operator -> <> [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
326
	0 relational_operator -> < [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
327
	0 relational_operator -> <= [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
328
	0 relational_operator -> > [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
329
	0 relational_operator -> >= [save_operator] at(1,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
330
	0 string_constant -> " str " [save_string] at(2,") [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
331
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [END,;,)]
332
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [)]
333
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [)]
	1 additive_operator -> + [save_operator] at(0,+) [)]
	2 additive_operator -> - [save_operator] at(0,-) [)]
	3 additive_operator -> OR [save_operator] at(0,OR) [)]
334
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [)]
	1 multiplicative_operator -> * [save_operator] at(0,*) [)]
	2 multiplicative_operator -> / [save_operator] at(0,/) [)]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [)]
335
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [)]
	3 factor -> ( expression ) [save_factor] at(0,() [)]
	4 factor -> identifier [save_identifier] at(0,identifier) [)]
	5 factor -> number [save_number] at(0,number) [)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [)]
	7 factor -> string_constant [save_string] at(0,string_constant) [)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [)]
	10 string_constant -> " str " [save_string] at(0,") [)]
336
	0 factor -> ( expression ) [save_factor] at(1,expression) [)]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [)]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [)]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [)]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [)]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [)]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [)]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [)]
	8 factor -> ( expression ) [save_factor] at(0,() [)]
	9 factor -> identifier [save_identifier] at(0,identifier) [)]
	10 factor -> number [save_number] at(0,number) [)]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [)]
	12 factor -> string_constant [save_string] at(0,string_constant) [)]
	13 additive_operator -> + [save_operator] at(0,+) [)]
	14 additive_operator -> - [save_operator] at(0,-) [)]
	15 additive_operator -> OR [save_operator] at(0,OR) [)]
	16 relational_operator -> = [save_operator] at(0,=) [)]
	17 relational_operator -> <> [save_operator] at(0,<>) [)]
	18 relational_operator -> < [save_operator] at(0,<) [)]
	19 relational_operator -> <= [save_operator] at(0,<=) [)]
	20 relational_operator -> > [save_operator] at(0,>) [)]
	21 relational_operator -> >= [save_operator] at(0,>=) [)]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [)]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [)]
	24 string_constant -> " str " [save_string] at(0,") [)]
337
	0 factor -> identifier [save_identifier] at(1,) [)]
338
	0 factor -> number [save_number] at(1,) [)]
339
	0 factor -> boolean_constant [save_operator] at(1,) [)]
340
	0 factor -> string_constant [save_string] at(1,) [)]
341
	0 additive_operator -> + [save_operator] at(1,) [)]
342
	0 additive_operator -> - [save_operator] at(1,) [)]
343
	0 additive_operator -> OR [save_operator] at(1,) [)]
344
	0 boolean_constant -> TRUE [save_boolean] at(1,) [)]
345
	0 boolean_constant -> FALSE [save_boolean] at(1,) [)]
346
	0 string_constant -> " str " [save_string] at(1,str) [)]
347
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(2,END) [;]
348
	0 statement_list -> statement [save_statement_list] at(1,) [;]
	1 statement_list -> statement statement_list_ext [save_statement_list] at(1,statement_list_ext) [;]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [;]
	3 statement_list -> statement statement_list_ext [save_statement_list,reduce_epsilon(1)] at(2,) [;]
349
	0 statement -> assignment [save_statement] at(1,) [;]
350
	0 assignment -> identifier := expression [save_assignment,assign_value] at(1,:=) [;]
351
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(3,type) [$]
	1 type -> INTEGER [save_type] at(0,INTEGER) [$]
	2 type -> REAL [save_type] at(0,REAL) [$]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [$]
	4 type -> STRING [save_type] at(0,STRING) [$]
352
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(3,parameter_list) [$]
	1 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(0,identifier) [$]
	2 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(4,)) [$]
353
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(3,) [$]
354
	0 statement_list -> statement statement_list_ext [save_statement_list] at(2,) [$]
355
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(1,statement) [$]
	1 statement -> assignment [save_statement] at(0,assignment) [$]
	2 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [$]
356
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [$]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [$]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [$]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [$]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [$]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [$]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [$]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [$]
	8 factor -> ( expression ) [save_factor] at(0,() [$]
	9 factor -> identifier [save_identifier] at(0,identifier) [$]
	10 factor -> number [save_number] at(0,number) [$]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [$]
	12 factor -> string_constant [save_string] at(0,string_constant) [$]
	13 additive_operator -> + [save_operator] at(0,+) [$]
	14 additive_operator -> - [save_operator] at(0,-) [$]
	15 additive_operator -> OR [save_operator] at(0,OR) [$]
	16 relational_operator -> = [save_operator] at(0,=) [$]
	17 relational_operator -> <> [save_operator] at(0,<>) [$]
	18 relational_operator -> < [save_operator] at(0,<) [$]
	19 relational_operator -> <= [save_operator] at(0,<=) [$]
	20 relational_operator -> > [save_operator] at(0,>) [$]
	21 relational_operator -> >= [save_operator] at(0,>=) [$]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [$]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [$]
	24 string_constant -> " str " [save_string] at(0,") [$]
357
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(3,) [.]
358
	0 statement_list -> statement statement_list_ext [save_statement_list] at(2,) [.]
359
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(1,statement) [.]
	1 statement -> assignment [save_statement] at(0,assignment) [.]
	2 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [.]
360
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [.]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [.]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [.]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [.]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [.]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [.]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [.]
	8 factor -> ( expression ) [save_factor] at(0,() [.]
	9 factor -> identifier [save_identifier] at(0,identifier) [.]
	10 factor -> number [save_number] at(0,number) [.]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.]
	12 factor -> string_constant [save_string] at(0,string_constant) [.]
	13 additive_operator -> + [save_operator] at(0,+) [.]
	14 additive_operator -> - [save_operator] at(0,-) [.]
	15 additive_operator -> OR [save_operator] at(0,OR) [.]
	16 relational_operator -> = [save_operator] at(0,=) [.]
	17 relational_operator -> <> [save_operator] at(0,<>) [.]
	18 relational_operator -> < [save_operator] at(0,<) [.]
	19 relational_operator -> <= [save_operator] at(0,<=) [.]
	20 relational_operator -> > [save_operator] at(0,>) [.]
	21 relational_operator -> >= [save_operator] at(0,>=) [.]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.]
	24 string_constant -> " str " [save_string] at(0,") [.]
361
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(3,type) [BEGIN]
	1 type -> INTEGER [save_type] at(0,INTEGER) [BEGIN]
	2 type -> REAL [save_type] at(0,REAL) [BEGIN]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [BEGIN]
	4 type -> STRING [save_type] at(0,STRING) [BEGIN]
362
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(3,parameter_list) [BEGIN]
	1 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(0,identifier) [BEGIN]
	2 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(4,)) [BEGIN]
363
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(2,statement_list_ext) [.,;]
	1 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [.,;]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext,reduce_epsilon(2)] at(3,) [.,;]
364
	0 assignment -> identifier := expression [save_assignment,assign_value] at(3,) [.,;]
365
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [.,;]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [.,;]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [.,;]
	3 relational_operator -> = [save_operator] at(0,=) [.,;]
	4 relational_operator -> <> [save_operator] at(0,<>) [.,;]
	5 relational_operator -> < [save_operator] at(0,<) [.,;]
	6 relational_operator -> <= [save_operator] at(0,<=) [.,;]
	7 relational_operator -> > [save_operator] at(0,>) [.,;]
	8 relational_operator -> >= [save_operator] at(0,>=) [.,;]
366
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [.,;]
	1 additive_operator -> + [save_operator] at(0,+) [.,;]
	2 additive_operator -> - [save_operator] at(0,-) [.,;]
	3 additive_operator -> OR [save_operator] at(0,OR) [.,;]
367
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [.,;]
368
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [.,;]
	1 multiplicative_operator -> * [save_operator] at(0,*) [.,;]
	2 multiplicative_operator -> / [save_operator] at(0,/) [.,;]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [.,;]
369
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [.,;]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.,;]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [.,;]
	3 factor -> ( expression ) [save_factor] at(0,() [.,;]
	4 factor -> identifier [save_identifier] at(0,identifier) [.,;]
	5 factor -> number [save_number] at(0,number) [.,;]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.,;]
	7 factor -> string_constant [save_string] at(0,string_constant) [.,;]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.,;]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.,;]
	10 string_constant -> " str " [save_string] at(0,") [.,;]
370
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [.,;]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [.,;]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [.,;]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.,;]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [.,;]
	5 factor -> ( expression ) [save_factor] at(0,() [.,;]
	6 factor -> identifier [save_identifier] at(0,identifier) [.,;]
	7 factor -> number [save_number] at(0,number) [.,;]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.,;]
	9 factor -> string_constant [save_string] at(0,string_constant) [.,;]
	10 additive_operator -> + [save_operator] at(0,+) [.,;]
	11 additive_operator -> - [save_operator] at(0,-) [.,;]
	12 additive_operator -> OR [save_operator] at(0,OR) [.,;]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.,;]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.,;]
	15 string_constant -> " str " [save_string] at(0,") [.,;]
371
	0 factor -> ( expression ) [save_factor] at(1,expression) [.,;]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [.,;]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [.,;]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [.,;]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.,;]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [.,;]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [.,;]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [.,;]
	8 factor -> ( expression ) [save_factor] at(0,() [.,;]
	9 factor -> identifier [save_identifier] at(0,identifier) [.,;]
	10 factor -> number [save_number] at(0,number) [.,;]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.,;]
	12 factor -> string_constant [save_string] at(0,string_constant) [.,;]
	13 additive_operator -> + [save_operator] at(0,+) [.,;]
	14 additive_operator -> - [save_operator] at(0,-) [.,;]
	15 additive_operator -> OR [save_operator] at(0,OR) [.,;]
	16 relational_operator -> = [save_operator] at(0,=) [.,;]
	17 relational_operator -> <> [save_operator] at(0,<>) [.,;]
	18 relational_operator -> < [save_operator] at(0,<) [.,;]
	19 relational_operator -> <= [save_operator] at(0,<=) [.,;]
	20 relational_operator -> > [save_operator] at(0,>) [.,;]
	21 relational_operator -> >= [save_operator] at(0,>=) [.,;]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.,;]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.,;]
	24 string_constant -> " str " [save_string] at(0,") [.,;]
372
	0 factor -> identifier [save_identifier] at(1,) [.,;]
373
	0 factor -> number [save_number] at(1,) [.,;]
374
	0 factor -> boolean_constant [save_operator] at(1,) [.,;]
375
	0 factor -> string_constant [save_string] at(1,) [.,;]
376
	0 additive_operator -> + [save_operator] at(1,) [.,;]
377
	0 additive_operator -> - [save_operator] at(1,) [.,;]
378
	0 additive_operator -> OR [save_operator] at(1,) [.,;]
379
	0 relational_operator -> = [save_operator] at(1,) [.,;]
380
	0 relational_operator -> <> [save_operator] at(1,) [.,;]
381
	0 relational_operator -> < [save_operator] at(1,) [.,;]
382
	0 relational_operator -> <= [save_operator] at(1,) [.,;]
383
	0 relational_operator -> > [save_operator] at(1,) [.,;]
384
	0 relational_operator -> >= [save_operator] at(1,) [.,;]
385
	0 boolean_constant -> TRUE [save_boolean] at(1,) [.,;]
386
	0 boolean_constant -> FALSE [save_boolean] at(1,) [.,;]
387
	0 string_constant -> " str " [save_string] at(1,str) [.,;]
388
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(3,parameter_list_ext) [VAR,PROCEDURE,BEGIN]
	1 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(0,,) [VAR,PROCEDURE,BEGIN]
389
	0 assignment -> identifier := expression [save_assignment,assign_value] at(3,) [END]
390
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [END]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [END]
	3 relational_operator -> = [save_operator] at(0,=) [END]
	4 relational_operator -> <> [save_operator] at(0,<>) [END]
	5 relational_operator -> < [save_operator] at(0,<) [END]
	6 relational_operator -> <= [save_operator] at(0,<=) [END]
	7 relational_operator -> > [save_operator] at(0,>) [END]
	8 relational_operator -> >= [save_operator] at(0,>=) [END]
391
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [END]
	1 additive_operator -> + [save_operator] at(0,+) [END]
	2 additive_operator -> - [save_operator] at(0,-) [END]
	3 additive_operator -> OR [save_operator] at(0,OR) [END]
392
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [END]
393
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [END]
	1 multiplicative_operator -> * [save_operator] at(0,*) [END]
	2 multiplicative_operator -> / [save_operator] at(0,/) [END]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [END]
394
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [END]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END]
	3 factor -> ( expression ) [save_factor] at(0,() [END]
	4 factor -> identifier [save_identifier] at(0,identifier) [END]
	5 factor -> number [save_number] at(0,number) [END]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END]
	7 factor -> string_constant [save_string] at(0,string_constant) [END]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END]
	10 string_constant -> " str " [save_string] at(0,") [END]
395
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [END]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [END]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END]
	5 factor -> ( expression ) [save_factor] at(0,() [END]
	6 factor -> identifier [save_identifier] at(0,identifier) [END]
	7 factor -> number [save_number] at(0,number) [END]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END]
	9 factor -> string_constant [save_string] at(0,string_constant) [END]
	10 additive_operator -> + [save_operator] at(0,+) [END]
	11 additive_operator -> - [save_operator] at(0,-) [END]
	12 additive_operator -> OR [save_operator] at(0,OR) [END]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END]
	15 string_constant -> " str " [save_string] at(0,") [END]
396
	0 factor -> ( expression ) [save_factor] at(1,expression) [END]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [END]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [END]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [END]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [END]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [END]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [END]
	8 factor -> ( expression ) [save_factor] at(0,() [END]
	9 factor -> identifier [save_identifier] at(0,identifier) [END]
	10 factor -> number [save_number] at(0,number) [END]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END]
	12 factor -> string_constant [save_string] at(0,string_constant) [END]
	13 additive_operator -> + [save_operator] at(0,+) [END]
	14 additive_operator -> - [save_operator] at(0,-) [END]
	15 additive_operator -> OR [save_operator] at(0,OR) [END]
	16 relational_operator -> = [save_operator] at(0,=) [END]
	17 relational_operator -> <> [save_operator] at(0,<>) [END]
	18 relational_operator -> < [save_operator] at(0,<) [END]
	19 relational_operator -> <= [save_operator] at(0,<=) [END]
	20 relational_operator -> > [save_operator] at(0,>) [END]
	21 relational_operator -> >= [save_operator] at(0,>=) [END]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END]
	24 string_constant -> " str " [save_string] at(0,") [END]
397
	0 factor -> identifier [save_identifier] at(1,) [END]
398
	0 factor -> number [save_number] at(1,) [END]
399
	0 factor -> boolean_constant [save_operator] at(1,) [END]
400
	0 factor -> string_constant [save_string] at(1,) [END]
401
	0 additive_operator -> + [save_operator] at(1,) [END]
402
	0 additive_operator -> - [save_operator] at(1,) [END]
403
	0 additive_operator -> OR [save_operator] at(1,) [END]
404
	0 relational_operator -> = [save_operator] at(1,) [END]
405
	0 relational_operator -> <> [save_operator] at(1,) [END]
406
	0 relational_operator -> < [save_operator] at(1,) [END]
407
	0 relational_operator -> <= [save_operator] at(1,) [END]
408
	0 relational_operator -> > [save_operator] at(1,) [END]
409
	0 relational_operator -> >= [save_operator] at(1,) [END]
410
	0 boolean_constant -> TRUE [save_boolean] at(1,) [END]
411
	0 boolean_constant -> FALSE [save_boolean] at(1,) [END]
412
	0 string_constant -> " str " [save_string] at(1,str) [END]
413
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [END,;]
414
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [END,;]
415
	0 factor -> ( expression ) [save_factor] at(3,) [END,;]
416
	0 string_constant -> " str " [save_string] at(3,) [END,;]
417
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [=,<>,<,<=,>,>=,END,;,)]
418
	0 factor -> ( expression ) [save_factor] at(3,) [=,<>,<,<=,>,>=,END,;,)]
419
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [=,<>,<,<=,>,>=,END,;,)]
420
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [=,<>,<,<=,>,>=,END,;,)]
421
	0 string_constant -> " str " [save_string] at(3,) [=,<>,<,<=,>,>=,END,;,)]
422
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [END,;,)]
423
	0 factor -> ( expression ) [save_factor] at(3,) [END,;,)]
424
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [END,;,)]
425
	0 string_constant -> " str " [save_string] at(3,) [END,;,)]
426
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
427
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [*,/,AND,+,-,OR,=,<>,<,<=,>,>=,END,;,)]
428
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(3,) [VAR,PROCEDURE,BEGIN]
429
	0 statement_list -> statement statement_list_ext [save_statement_list] at(2,) [VAR,PROCEDURE,BEGIN]
430
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(1,statement) [VAR,PROCEDURE,BEGIN]
	1 statement -> assignment [save_statement] at(0,assignment) [VAR,PROCEDURE,BEGIN]
	2 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [VAR,PROCEDURE,BEGIN]
431
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [VAR,PROCEDURE,BEGIN]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [VAR,PROCEDURE,BEGIN]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [VAR,PROCEDURE,BEGIN]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [VAR,PROCEDURE,BEGIN]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [VAR,PROCEDURE,BEGIN]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [VAR,PROCEDURE,BEGIN]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [VAR,PROCEDURE,BEGIN]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
	8 factor -> ( expression ) [save_factor] at(0,() [VAR,PROCEDURE,BEGIN]
	9 factor -> identifier [save_identifier] at(0,identifier) [VAR,PROCEDURE,BEGIN]
	10 factor -> number [save_number] at(0,number) [VAR,PROCEDURE,BEGIN]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [VAR,PROCEDURE,BEGIN]
	12 factor -> string_constant [save_string] at(0,string_constant) [VAR,PROCEDURE,BEGIN]
	13 additive_operator -> + [save_operator] at(0,+) [VAR,PROCEDURE,BEGIN]
	14 additive_operator -> - [save_operator] at(0,-) [VAR,PROCEDURE,BEGIN]
	15 additive_operator -> OR [save_operator] at(0,OR) [VAR,PROCEDURE,BEGIN]
	16 relational_operator -> = [save_operator] at(0,=) [VAR,PROCEDURE,BEGIN]
	17 relational_operator -> <> [save_operator] at(0,<>) [VAR,PROCEDURE,BEGIN]
	18 relational_operator -> < [save_operator] at(0,<) [VAR,PROCEDURE,BEGIN]
	19 relational_operator -> <= [save_operator] at(0,<=) [VAR,PROCEDURE,BEGIN]
	20 relational_operator -> > [save_operator] at(0,>) [VAR,PROCEDURE,BEGIN]
	21 relational_operator -> >= [save_operator] at(0,>=) [VAR,PROCEDURE,BEGIN]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [VAR,PROCEDURE,BEGIN]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [VAR,PROCEDURE,BEGIN]
	24 string_constant -> " str " [save_string] at(0,") [VAR,PROCEDURE,BEGIN]
432
	0 factor -> ( expression ) [save_factor] at(3,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
433
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
434
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	3 factor -> ( expression ) [save_factor] at(0,() [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	4 factor -> identifier [save_identifier] at(0,identifier) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	5 factor -> number [save_number] at(0,number) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	7 factor -> string_constant [save_string] at(0,string_constant) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
	10 string_constant -> " str " [save_string] at(0,") [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
435
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
436
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
437
	0 string_constant -> " str " [save_string] at(3,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
438
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [)]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [)]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [)]
	3 factor -> ( expression ) [save_factor] at(0,() [)]
	4 factor -> identifier [save_identifier] at(0,identifier) [)]
	5 factor -> number [save_number] at(0,number) [)]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [)]
	7 factor -> string_constant [save_string] at(0,string_constant) [)]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [)]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [)]
	10 string_constant -> " str " [save_string] at(0,") [)]
439
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [)]
	1 factor -> ( expression ) [save_factor] at(0,() [)]
	2 factor -> identifier [save_identifier] at(0,identifier) [)]
	3 factor -> number [save_number] at(0,number) [)]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [)]
	5 factor -> string_constant [save_string] at(0,string_constant) [)]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [)]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [)]
	8 string_constant -> " str " [save_string] at(0,") [)]
440
	0 multiplicative_operator -> * [save_operator] at(1,) [)]
441
	0 multiplicative_operator -> / [save_operator] at(1,) [)]
442
	0 multiplicative_operator -> AND [save_operator] at(1,) [)]
443
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [)]
444
	0 factor -> ( expression ) [save_factor] at(2,)) [)]
445
	0 string_constant -> " str " [save_string] at(2,") [)]
446
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(3,) [;]
447
	0 statement_list -> statement statement_list_ext [save_statement_list] at(2,) [;]
448
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(1,statement) [;]
	1 statement -> assignment [save_statement] at(0,assignment) [;]
	2 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [;]
449
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [;]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [;]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [;]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [;]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [;]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [;]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [;]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [;]
	8 factor -> ( expression ) [save_factor] at(0,() [;]
	9 factor -> identifier [save_identifier] at(0,identifier) [;]
	10 factor -> number [save_number] at(0,number) [;]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [;]
	12 factor -> string_constant [save_string] at(0,string_constant) [;]
	13 additive_operator -> + [save_operator] at(0,+) [;]
	14 additive_operator -> - [save_operator] at(0,-) [;]
	15 additive_operator -> OR [save_operator] at(0,OR) [;]
	16 relational_operator -> = [save_operator] at(0,=) [;]
	17 relational_operator -> <> [save_operator] at(0,<>) [;]
	18 relational_operator -> < [save_operator] at(0,<) [;]
	19 relational_operator -> <= [save_operator] at(0,<=) [;]
	20 relational_operator -> > [save_operator] at(0,>) [;]
	21 relational_operator -> >= [save_operator] at(0,>=) [;]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [;]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [;]
	24 string_constant -> " str " [save_string] at(0,") [;]
450
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(4,;) [$]
451
	0 type -> INTEGER [save_type] at(1,) [$]
452
	0 type -> REAL [save_type] at(1,) [$]
453
	0 type -> BOOLEAN' [save_type] at(1,) [$]
454
	0 type -> STRING [save_type] at(1,) [$]
455
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(4,)) [$]
456
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(1,:) [$]
457
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(5,;) [$]
458
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(2,statement_list_ext) [$]
	1 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [$]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext,reduce_epsilon(2)] at(3,) [$]
459
	0 assignment -> identifier := expression [save_assignment,assign_value] at(3,) [$]
460
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [$]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [$]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [$]
	3 relational_operator -> = [save_operator] at(0,=) [$]
	4 relational_operator -> <> [save_operator] at(0,<>) [$]
	5 relational_operator -> < [save_operator] at(0,<) [$]
	6 relational_operator -> <= [save_operator] at(0,<=) [$]
	7 relational_operator -> > [save_operator] at(0,>) [$]
	8 relational_operator -> >= [save_operator] at(0,>=) [$]
461
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [$]
	1 additive_operator -> + [save_operator] at(0,+) [$]
	2 additive_operator -> - [save_operator] at(0,-) [$]
	3 additive_operator -> OR [save_operator] at(0,OR) [$]
462
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [$]
463
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [$]
	1 multiplicative_operator -> * [save_operator] at(0,*) [$]
	2 multiplicative_operator -> / [save_operator] at(0,/) [$]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [$]
464
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [$]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [$]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [$]
	3 factor -> ( expression ) [save_factor] at(0,() [$]
	4 factor -> identifier [save_identifier] at(0,identifier) [$]
	5 factor -> number [save_number] at(0,number) [$]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [$]
	7 factor -> string_constant [save_string] at(0,string_constant) [$]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [$]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [$]
	10 string_constant -> " str " [save_string] at(0,") [$]
465
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [$]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [$]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [$]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [$]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [$]
	5 factor -> ( expression ) [save_factor] at(0,() [$]
	6 factor -> identifier [save_identifier] at(0,identifier) [$]
	7 factor -> number [save_number] at(0,number) [$]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [$]
	9 factor -> string_constant [save_string] at(0,string_constant) [$]
	10 additive_operator -> + [save_operator] at(0,+) [$]
	11 additive_operator -> - [save_operator] at(0,-) [$]
	12 additive_operator -> OR [save_operator] at(0,OR) [$]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [$]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [$]
	15 string_constant -> " str " [save_string] at(0,") [$]
466
	0 factor -> ( expression ) [save_factor] at(1,expression) [$]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [$]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [$]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [$]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [$]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [$]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [$]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [$]
	8 factor -> ( expression ) [save_factor] at(0,() [$]
	9 factor -> identifier [save_identifier] at(0,identifier) [$]
	10 factor -> number [save_number] at(0,number) [$]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [$]
	12 factor -> string_constant [save_string] at(0,string_constant) [$]
	13 additive_operator -> + [save_operator] at(0,+) [$]
	14 additive_operator -> - [save_operator] at(0,-) [$]
	15 additive_operator -> OR [save_operator] at(0,OR) [$]
	16 relational_operator -> = [save_operator] at(0,=) [$]
	17 relational_operator -> <> [save_operator] at(0,<>) [$]
	18 relational_operator -> < [save_operator] at(0,<) [$]
	19 relational_operator -> <= [save_operator] at(0,<=) [$]
	20 relational_operator -> > [save_operator] at(0,>) [$]
	21 relational_operator -> >= [save_operator] at(0,>=) [$]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [$]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [$]
	24 string_constant -> " str " [save_string] at(0,") [$]
467
	0 factor -> identifier [save_identifier] at(1,) [$]
468
	0 factor -> number [save_number] at(1,) [$]
469
	0 factor -> boolean_constant [save_operator] at(1,) [$]
470
	0 factor -> string_constant [save_string] at(1,) [$]
471
	0 additive_operator -> + [save_operator] at(1,) [$]
472
	0 additive_operator -> - [save_operator] at(1,) [$]
473
	0 additive_operator -> OR [save_operator] at(1,) [$]
474
	0 relational_operator -> = [save_operator] at(1,) [$]
475
	0 relational_operator -> <> [save_operator] at(1,) [$]
476
	0 relational_operator -> < [save_operator] at(1,) [$]
477
	0 relational_operator -> <= [save_operator] at(1,) [$]
478
	0 relational_operator -> > [save_operator] at(1,) [$]
479
	0 relational_operator -> >= [save_operator] at(1,) [$]
480
	0 boolean_constant -> TRUE [save_boolean] at(1,) [$]
481
	0 boolean_constant -> FALSE [save_boolean] at(1,) [$]
482
	0 string_constant -> " str " [save_string] at(1,str) [$]
483
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(2,statement_list_ext) [.]
	1 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [.]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext,reduce_epsilon(2)] at(3,) [.]
484
	0 assignment -> identifier := expression [save_assignment,assign_value] at(3,) [.]
485
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [.]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [.]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [.]
	3 relational_operator -> = [save_operator] at(0,=) [.]
	4 relational_operator -> <> [save_operator] at(0,<>) [.]
	5 relational_operator -> < [save_operator] at(0,<) [.]
	6 relational_operator -> <= [save_operator] at(0,<=) [.]
	7 relational_operator -> > [save_operator] at(0,>) [.]
	8 relational_operator -> >= [save_operator] at(0,>=) [.]
486
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [.]
	1 additive_operator -> + [save_operator] at(0,+) [.]
	2 additive_operator -> - [save_operator] at(0,-) [.]
	3 additive_operator -> OR [save_operator] at(0,OR) [.]
487
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [.]
488
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [.]
	1 multiplicative_operator -> * [save_operator] at(0,*) [.]
	2 multiplicative_operator -> / [save_operator] at(0,/) [.]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [.]
489
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [.]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [.]
	3 factor -> ( expression ) [save_factor] at(0,() [.]
	4 factor -> identifier [save_identifier] at(0,identifier) [.]
	5 factor -> number [save_number] at(0,number) [.]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.]
	7 factor -> string_constant [save_string] at(0,string_constant) [.]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.]
	10 string_constant -> " str " [save_string] at(0,") [.]
490
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [.]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [.]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [.]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [.]
	5 factor -> ( expression ) [save_factor] at(0,() [.]
	6 factor -> identifier [save_identifier] at(0,identifier) [.]
	7 factor -> number [save_number] at(0,number) [.]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.]
	9 factor -> string_constant [save_string] at(0,string_constant) [.]
	10 additive_operator -> + [save_operator] at(0,+) [.]
	11 additive_operator -> - [save_operator] at(0,-) [.]
	12 additive_operator -> OR [save_operator] at(0,OR) [.]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.]
	15 string_constant -> " str " [save_string] at(0,") [.]
491
	0 factor -> ( expression ) [save_factor] at(1,expression) [.]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [.]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [.]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [.]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [.]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [.]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [.]
	8 factor -> ( expression ) [save_factor] at(0,() [.]
	9 factor -> identifier [save_identifier] at(0,identifier) [.]
	10 factor -> number [save_number] at(0,number) [.]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.]
	12 factor -> string_constant [save_string] at(0,string_constant) [.]
	13 additive_operator -> + [save_operator] at(0,+) [.]
	14 additive_operator -> - [save_operator] at(0,-) [.]
	15 additive_operator -> OR [save_operator] at(0,OR) [.]
	16 relational_operator -> = [save_operator] at(0,=) [.]
	17 relational_operator -> <> [save_operator] at(0,<>) [.]
	18 relational_operator -> < [save_operator] at(0,<) [.]
	19 relational_operator -> <= [save_operator] at(0,<=) [.]
	20 relational_operator -> > [save_operator] at(0,>) [.]
	21 relational_operator -> >= [save_operator] at(0,>=) [.]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.]
	24 string_constant -> " str " [save_string] at(0,") [.]
492
	0 factor -> identifier [save_identifier] at(1,) [.]
493
	0 factor -> number [save_number] at(1,) [.]
494
	0 factor -> boolean_constant [save_operator] at(1,) [.]
495
	0 factor -> string_constant [save_string] at(1,) [.]
496
	0 additive_operator -> + [save_operator] at(1,) [.]
497
	0 additive_operator -> - [save_operator] at(1,) [.]
498
	0 additive_operator -> OR [save_operator] at(1,) [.]
499
	0 relational_operator -> = [save_operator] at(1,) [.]
500
	0 relational_operator -> <> [save_operator] at(1,) [.]
501
	0 relational_operator -> < [save_operator] at(1,) [.]
502
	0 relational_operator -> <= [save_operator] at(1,) [.]
503
	0 relational_operator -> > [save_operator] at(1,) [.]
504
	0 relational_operator -> >= [save_operator] at(1,) [.]
505
	0 boolean_constant -> TRUE [save_boolean] at(1,) [.]
506
	0 boolean_constant -> FALSE [save_boolean] at(1,) [.]
507
	0 string_constant -> " str " [save_string] at(1,str) [.]
508
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(4,;) [BEGIN]
509
	0 type -> INTEGER [save_type] at(1,) [BEGIN]
510
	0 type -> REAL [save_type] at(1,) [BEGIN]
511
	0 type -> BOOLEAN' [save_type] at(1,) [BEGIN]
512
	0 type -> STRING [save_type] at(1,) [BEGIN]
513
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(4,)) [BEGIN]
514
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(1,:) [BEGIN]
515
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(5,;) [BEGIN]
516
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(3,) [.,;]
517
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [.,;]
518
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [.,;]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.,;]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [.,;]
	3 factor -> ( expression ) [save_factor] at(0,() [.,;]
	4 factor -> identifier [save_identifier] at(0,identifier) [.,;]
	5 factor -> number [save_number] at(0,number) [.,;]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.,;]
	7 factor -> string_constant [save_string] at(0,string_constant) [.,;]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.,;]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.,;]
	10 string_constant -> " str " [save_string] at(0,") [.,;]
519
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [.,;]
	1 factor -> ( expression ) [save_factor] at(0,() [.,;]
	2 factor -> identifier [save_identifier] at(0,identifier) [.,;]
	3 factor -> number [save_number] at(0,number) [.,;]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.,;]
	5 factor -> string_constant [save_string] at(0,string_constant) [.,;]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.,;]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.,;]
	8 string_constant -> " str " [save_string] at(0,") [.,;]
520
	0 multiplicative_operator -> * [save_operator] at(1,) [.,;]
521
	0 multiplicative_operator -> / [save_operator] at(1,) [.,;]
522
	0 multiplicative_operator -> AND [save_operator] at(1,) [.,;]
523
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [.,;]
524
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [.,;]
525
	0 factor -> ( expression ) [save_factor] at(2,)) [.,;]
526
	0 string_constant -> " str " [save_string] at(2,") [.,;]
527
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(4,) [VAR,PROCEDURE,BEGIN]
528
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(1,identifier) [VAR,PROCEDURE,BEGIN]
529
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [END]
530
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [END]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [END]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END]
	3 factor -> ( expression ) [save_factor] at(0,() [END]
	4 factor -> identifier [save_identifier] at(0,identifier) [END]
	5 factor -> number [save_number] at(0,number) [END]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END]
	7 factor -> string_constant [save_string] at(0,string_constant) [END]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END]
	10 string_constant -> " str " [save_string] at(0,") [END]
531
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [END]
	1 factor -> ( expression ) [save_factor] at(0,() [END]
	2 factor -> identifier [save_identifier] at(0,identifier) [END]
	3 factor -> number [save_number] at(0,number) [END]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [END]
	5 factor -> string_constant [save_string] at(0,string_constant) [END]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [END]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [END]
	8 string_constant -> " str " [save_string] at(0,") [END]
532
	0 multiplicative_operator -> * [save_operator] at(1,) [END]
533
	0 multiplicative_operator -> / [save_operator] at(1,) [END]
534
	0 multiplicative_operator -> AND [save_operator] at(1,) [END]
535
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [END]
536
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [END]
537
	0 factor -> ( expression ) [save_factor] at(2,)) [END]
538
	0 string_constant -> " str " [save_string] at(2,") [END]
539
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(2,statement_list_ext) [VAR,PROCEDURE,BEGIN]
	1 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [VAR,PROCEDURE,BEGIN]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext,reduce_epsilon(2)] at(3,) [VAR,PROCEDURE,BEGIN]
540
	0 assignment -> identifier := expression [save_assignment,assign_value] at(3,) [VAR,PROCEDURE,BEGIN]
541
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [VAR,PROCEDURE,BEGIN]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [VAR,PROCEDURE,BEGIN]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
	3 relational_operator -> = [save_operator] at(0,=) [VAR,PROCEDURE,BEGIN]
	4 relational_operator -> <> [save_operator] at(0,<>) [VAR,PROCEDURE,BEGIN]
	5 relational_operator -> < [save_operator] at(0,<) [VAR,PROCEDURE,BEGIN]
	6 relational_operator -> <= [save_operator] at(0,<=) [VAR,PROCEDURE,BEGIN]
	7 relational_operator -> > [save_operator] at(0,>) [VAR,PROCEDURE,BEGIN]
	8 relational_operator -> >= [save_operator] at(0,>=) [VAR,PROCEDURE,BEGIN]
542
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [VAR,PROCEDURE,BEGIN]
	1 additive_operator -> + [save_operator] at(0,+) [VAR,PROCEDURE,BEGIN]
	2 additive_operator -> - [save_operator] at(0,-) [VAR,PROCEDURE,BEGIN]
	3 additive_operator -> OR [save_operator] at(0,OR) [VAR,PROCEDURE,BEGIN]
543
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [VAR,PROCEDURE,BEGIN]
544
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [VAR,PROCEDURE,BEGIN]
	1 multiplicative_operator -> * [save_operator] at(0,*) [VAR,PROCEDURE,BEGIN]
	2 multiplicative_operator -> / [save_operator] at(0,/) [VAR,PROCEDURE,BEGIN]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [VAR,PROCEDURE,BEGIN]
545
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [VAR,PROCEDURE,BEGIN]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [VAR,PROCEDURE,BEGIN]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [VAR,PROCEDURE,BEGIN]
	3 factor -> ( expression ) [save_factor] at(0,() [VAR,PROCEDURE,BEGIN]
	4 factor -> identifier [save_identifier] at(0,identifier) [VAR,PROCEDURE,BEGIN]
	5 factor -> number [save_number] at(0,number) [VAR,PROCEDURE,BEGIN]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [VAR,PROCEDURE,BEGIN]
	7 factor -> string_constant [save_string] at(0,string_constant) [VAR,PROCEDURE,BEGIN]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [VAR,PROCEDURE,BEGIN]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [VAR,PROCEDURE,BEGIN]
	10 string_constant -> " str " [save_string] at(0,") [VAR,PROCEDURE,BEGIN]
546
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [VAR,PROCEDURE,BEGIN]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [VAR,PROCEDURE,BEGIN]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [VAR,PROCEDURE,BEGIN]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [VAR,PROCEDURE,BEGIN]
	5 factor -> ( expression ) [save_factor] at(0,() [VAR,PROCEDURE,BEGIN]
	6 factor -> identifier [save_identifier] at(0,identifier) [VAR,PROCEDURE,BEGIN]
	7 factor -> number [save_number] at(0,number) [VAR,PROCEDURE,BEGIN]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [VAR,PROCEDURE,BEGIN]
	9 factor -> string_constant [save_string] at(0,string_constant) [VAR,PROCEDURE,BEGIN]
	10 additive_operator -> + [save_operator] at(0,+) [VAR,PROCEDURE,BEGIN]
	11 additive_operator -> - [save_operator] at(0,-) [VAR,PROCEDURE,BEGIN]
	12 additive_operator -> OR [save_operator] at(0,OR) [VAR,PROCEDURE,BEGIN]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [VAR,PROCEDURE,BEGIN]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [VAR,PROCEDURE,BEGIN]
	15 string_constant -> " str " [save_string] at(0,") [VAR,PROCEDURE,BEGIN]
547
	0 factor -> ( expression ) [save_factor] at(1,expression) [VAR,PROCEDURE,BEGIN]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [VAR,PROCEDURE,BEGIN]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [VAR,PROCEDURE,BEGIN]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [VAR,PROCEDURE,BEGIN]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [VAR,PROCEDURE,BEGIN]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [VAR,PROCEDURE,BEGIN]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [VAR,PROCEDURE,BEGIN]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [VAR,PROCEDURE,BEGIN]
	8 factor -> ( expression ) [save_factor] at(0,() [VAR,PROCEDURE,BEGIN]
	9 factor -> identifier [save_identifier] at(0,identifier) [VAR,PROCEDURE,BEGIN]
	10 factor -> number [save_number] at(0,number) [VAR,PROCEDURE,BEGIN]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [VAR,PROCEDURE,BEGIN]
	12 factor -> string_constant [save_string] at(0,string_constant) [VAR,PROCEDURE,BEGIN]
	13 additive_operator -> + [save_operator] at(0,+) [VAR,PROCEDURE,BEGIN]
	14 additive_operator -> - [save_operator] at(0,-) [VAR,PROCEDURE,BEGIN]
	15 additive_operator -> OR [save_operator] at(0,OR) [VAR,PROCEDURE,BEGIN]
	16 relational_operator -> = [save_operator] at(0,=) [VAR,PROCEDURE,BEGIN]
	17 relational_operator -> <> [save_operator] at(0,<>) [VAR,PROCEDURE,BEGIN]
	18 relational_operator -> < [save_operator] at(0,<) [VAR,PROCEDURE,BEGIN]
	19 relational_operator -> <= [save_operator] at(0,<=) [VAR,PROCEDURE,BEGIN]
	20 relational_operator -> > [save_operator] at(0,>) [VAR,PROCEDURE,BEGIN]
	21 relational_operator -> >= [save_operator] at(0,>=) [VAR,PROCEDURE,BEGIN]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [VAR,PROCEDURE,BEGIN]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [VAR,PROCEDURE,BEGIN]
	24 string_constant -> " str " [save_string] at(0,") [VAR,PROCEDURE,BEGIN]
548
	0 factor -> identifier [save_identifier] at(1,) [VAR,PROCEDURE,BEGIN]
549
	0 factor -> number [save_number] at(1,) [VAR,PROCEDURE,BEGIN]
550
	0 factor -> boolean_constant [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
551
	0 factor -> string_constant [save_string] at(1,) [VAR,PROCEDURE,BEGIN]
552
	0 additive_operator -> + [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
553
	0 additive_operator -> - [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
554
	0 additive_operator -> OR [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
555
	0 relational_operator -> = [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
556
	0 relational_operator -> <> [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
557
	0 relational_operator -> < [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
558
	0 relational_operator -> <= [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
559
	0 relational_operator -> > [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
560
	0 relational_operator -> >= [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
561
	0 boolean_constant -> TRUE [save_boolean] at(1,) [VAR,PROCEDURE,BEGIN]
562
	0 boolean_constant -> FALSE [save_boolean] at(1,) [VAR,PROCEDURE,BEGIN]
563
	0 string_constant -> " str " [save_string] at(1,str) [VAR,PROCEDURE,BEGIN]
564
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [+,-,OR,=,<>,<,<=,>,>=,END,;,)]
565
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [)]
566
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [)]
567
	0 factor -> ( expression ) [save_factor] at(3,) [)]
568
	0 string_constant -> " str " [save_string] at(3,) [)]
569
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(2,statement_list_ext) [;]
	1 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [;]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext,reduce_epsilon(2)] at(3,) [;]
570
	0 assignment -> identifier := expression [save_assignment,assign_value] at(3,) [;]
571
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [;]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [;]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [;]
	3 relational_operator -> = [save_operator] at(0,=) [;]
	4 relational_operator -> <> [save_operator] at(0,<>) [;]
	5 relational_operator -> < [save_operator] at(0,<) [;]
	6 relational_operator -> <= [save_operator] at(0,<=) [;]
	7 relational_operator -> > [save_operator] at(0,>) [;]
	8 relational_operator -> >= [save_operator] at(0,>=) [;]
572
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [;]
	1 additive_operator -> + [save_operator] at(0,+) [;]
	2 additive_operator -> - [save_operator] at(0,-) [;]
	3 additive_operator -> OR [save_operator] at(0,OR) [;]
573
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [;]
574
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [;]
	1 multiplicative_operator -> * [save_operator] at(0,*) [;]
	2 multiplicative_operator -> / [save_operator] at(0,/) [;]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [;]
575
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [;]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [;]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [;]
	3 factor -> ( expression ) [save_factor] at(0,() [;]
	4 factor -> identifier [save_identifier] at(0,identifier) [;]
	5 factor -> number [save_number] at(0,number) [;]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [;]
	7 factor -> string_constant [save_string] at(0,string_constant) [;]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [;]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [;]
	10 string_constant -> " str " [save_string] at(0,") [;]
576
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [;]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [;]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [;]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [;]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [;]
	5 factor -> ( expression ) [save_factor] at(0,() [;]
	6 factor -> identifier [save_identifier] at(0,identifier) [;]
	7 factor -> number [save_number] at(0,number) [;]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [;]
	9 factor -> string_constant [save_string] at(0,string_constant) [;]
	10 additive_operator -> + [save_operator] at(0,+) [;]
	11 additive_operator -> - [save_operator] at(0,-) [;]
	12 additive_operator -> OR [save_operator] at(0,OR) [;]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [;]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [;]
	15 string_constant -> " str " [save_string] at(0,") [;]
577
	0 factor -> ( expression ) [save_factor] at(1,expression) [;]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [;]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [;]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [;]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [;]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [;]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [;]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [;]
	8 factor -> ( expression ) [save_factor] at(0,() [;]
	9 factor -> identifier [save_identifier] at(0,identifier) [;]
	10 factor -> number [save_number] at(0,number) [;]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [;]
	12 factor -> string_constant [save_string] at(0,string_constant) [;]
	13 additive_operator -> + [save_operator] at(0,+) [;]
	14 additive_operator -> - [save_operator] at(0,-) [;]
	15 additive_operator -> OR [save_operator] at(0,OR) [;]
	16 relational_operator -> = [save_operator] at(0,=) [;]
	17 relational_operator -> <> [save_operator] at(0,<>) [;]
	18 relational_operator -> < [save_operator] at(0,<) [;]
	19 relational_operator -> <= [save_operator] at(0,<=) [;]
	20 relational_operator -> > [save_operator] at(0,>) [;]
	21 relational_operator -> >= [save_operator] at(0,>=) [;]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [;]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [;]
	24 string_constant -> " str " [save_string] at(0,") [;]
578
	0 factor -> identifier [save_identifier] at(1,) [;]
579
	0 factor -> number [save_number] at(1,) [;]
580
	0 factor -> boolean_constant [save_operator] at(1,) [;]
581
	0 factor -> string_constant [save_string] at(1,) [;]
582
	0 additive_operator -> + [save_operator] at(1,) [;]
583
	0 additive_operator -> - [save_operator] at(1,) [;]
584
	0 additive_operator -> OR [save_operator] at(1,) [;]
585
	0 relational_operator -> = [save_operator] at(1,) [;]
586
	0 relational_operator -> <> [save_operator] at(1,) [;]
587
	0 relational_operator -> < [save_operator] at(1,) [;]
588
	0 relational_operator -> <= [save_operator] at(1,) [;]
589
	0 relational_operator -> > [save_operator] at(1,) [;]
590
	0 relational_operator -> >= [save_operator] at(1,) [;]
591
	0 boolean_constant -> TRUE [save_boolean] at(1,) [;]
592
	0 boolean_constant -> FALSE [save_boolean] at(1,) [;]
593
	0 string_constant -> " str " [save_string] at(1,str) [;]
594
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(5,var_declaration) [$]
	1 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [$]
	2 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable,reduce_epsilon(5)] at(6,) [$]
595
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(5,;) [$]
596
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(2,type) [$]
	1 type -> INTEGER [save_type] at(0,INTEGER) [$]
	2 type -> REAL [save_type] at(0,REAL) [$]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [$]
	4 type -> STRING [save_type] at(0,STRING) [$]
597
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(6,block) [$]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [$]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [$]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [$]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [$]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [$]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [$]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [$]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [$]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [$]
598
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(3,) [$]
599
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [$]
600
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [$]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [$]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [$]
	3 factor -> ( expression ) [save_factor] at(0,() [$]
	4 factor -> identifier [save_identifier] at(0,identifier) [$]
	5 factor -> number [save_number] at(0,number) [$]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [$]
	7 factor -> string_constant [save_string] at(0,string_constant) [$]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [$]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [$]
	10 string_constant -> " str " [save_string] at(0,") [$]
601
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [$]
	1 factor -> ( expression ) [save_factor] at(0,() [$]
	2 factor -> identifier [save_identifier] at(0,identifier) [$]
	3 factor -> number [save_number] at(0,number) [$]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [$]
	5 factor -> string_constant [save_string] at(0,string_constant) [$]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [$]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [$]
	8 string_constant -> " str " [save_string] at(0,") [$]
602
	0 multiplicative_operator -> * [save_operator] at(1,) [$]
603
	0 multiplicative_operator -> / [save_operator] at(1,) [$]
604
	0 multiplicative_operator -> AND [save_operator] at(1,) [$]
605
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [$]
606
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [$]
607
	0 factor -> ( expression ) [save_factor] at(2,)) [$]
608
	0 string_constant -> " str " [save_string] at(2,") [$]
609
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(3,) [.]
610
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [.]
611
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [.]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [.]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [.]
	3 factor -> ( expression ) [save_factor] at(0,() [.]
	4 factor -> identifier [save_identifier] at(0,identifier) [.]
	5 factor -> number [save_number] at(0,number) [.]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.]
	7 factor -> string_constant [save_string] at(0,string_constant) [.]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.]
	10 string_constant -> " str " [save_string] at(0,") [.]
612
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [.]
	1 factor -> ( expression ) [save_factor] at(0,() [.]
	2 factor -> identifier [save_identifier] at(0,identifier) [.]
	3 factor -> number [save_number] at(0,number) [.]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [.]
	5 factor -> string_constant [save_string] at(0,string_constant) [.]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [.]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [.]
	8 string_constant -> " str " [save_string] at(0,") [.]
613
	0 multiplicative_operator -> * [save_operator] at(1,) [.]
614
	0 multiplicative_operator -> / [save_operator] at(1,) [.]
615
	0 multiplicative_operator -> AND [save_operator] at(1,) [.]
616
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [.]
617
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [.]
618
	0 factor -> ( expression ) [save_factor] at(2,)) [.]
619
	0 string_constant -> " str " [save_string] at(2,") [.]
620
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(5,var_declaration) [BEGIN]
	1 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [BEGIN]
	2 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable,reduce_epsilon(5)] at(6,) [BEGIN]
621
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(5,;) [BEGIN]
622
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(2,type) [BEGIN]
	1 type -> INTEGER [save_type] at(0,INTEGER) [BEGIN]
	2 type -> REAL [save_type] at(0,REAL) [BEGIN]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [BEGIN]
	4 type -> STRING [save_type] at(0,STRING) [BEGIN]
623
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(6,block) [BEGIN]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [BEGIN]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [BEGIN]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [BEGIN]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [BEGIN]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [BEGIN]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
624
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [.,;]
625
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [.,;]
626
	0 factor -> ( expression ) [save_factor] at(3,) [.,;]
627
	0 string_constant -> " str " [save_string] at(3,) [.,;]
628
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(2,:) [VAR,PROCEDURE,BEGIN]
629
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [END]
630
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [END]
631
	0 factor -> ( expression ) [save_factor] at(3,) [END]
632
	0 string_constant -> " str " [save_string] at(3,) [END]
633
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(3,) [VAR,PROCEDURE,BEGIN]
634
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [VAR,PROCEDURE,BEGIN]
635
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [VAR,PROCEDURE,BEGIN]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [VAR,PROCEDURE,BEGIN]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [VAR,PROCEDURE,BEGIN]
	3 factor -> ( expression ) [save_factor] at(0,() [VAR,PROCEDURE,BEGIN]
	4 factor -> identifier [save_identifier] at(0,identifier) [VAR,PROCEDURE,BEGIN]
	5 factor -> number [save_number] at(0,number) [VAR,PROCEDURE,BEGIN]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [VAR,PROCEDURE,BEGIN]
	7 factor -> string_constant [save_string] at(0,string_constant) [VAR,PROCEDURE,BEGIN]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [VAR,PROCEDURE,BEGIN]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [VAR,PROCEDURE,BEGIN]
	10 string_constant -> " str " [save_string] at(0,") [VAR,PROCEDURE,BEGIN]
636
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [VAR,PROCEDURE,BEGIN]
	1 factor -> ( expression ) [save_factor] at(0,() [VAR,PROCEDURE,BEGIN]
	2 factor -> identifier [save_identifier] at(0,identifier) [VAR,PROCEDURE,BEGIN]
	3 factor -> number [save_number] at(0,number) [VAR,PROCEDURE,BEGIN]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [VAR,PROCEDURE,BEGIN]
	5 factor -> string_constant [save_string] at(0,string_constant) [VAR,PROCEDURE,BEGIN]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [VAR,PROCEDURE,BEGIN]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [VAR,PROCEDURE,BEGIN]
	8 string_constant -> " str " [save_string] at(0,") [VAR,PROCEDURE,BEGIN]
637
	0 multiplicative_operator -> * [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
638
	0 multiplicative_operator -> / [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
639
	0 multiplicative_operator -> AND [save_operator] at(1,) [VAR,PROCEDURE,BEGIN]
640
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [VAR,PROCEDURE,BEGIN]
641
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [VAR,PROCEDURE,BEGIN]
642
	0 factor -> ( expression ) [save_factor] at(2,)) [VAR,PROCEDURE,BEGIN]
643
	0 string_constant -> " str " [save_string] at(2,") [VAR,PROCEDURE,BEGIN]
644
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(3,) [;]
645
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [;]
646
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [;]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [;]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [;]
	3 factor -> ( expression ) [save_factor] at(0,() [;]
	4 factor -> identifier [save_identifier] at(0,identifier) [;]
	5 factor -> number [save_number] at(0,number) [;]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [;]
	7 factor -> string_constant [save_string] at(0,string_constant) [;]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [;]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [;]
	10 string_constant -> " str " [save_string] at(0,") [;]
647
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [;]
	1 factor -> ( expression ) [save_factor] at(0,() [;]
	2 factor -> identifier [save_identifier] at(0,identifier) [;]
	3 factor -> number [save_number] at(0,number) [;]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [;]
	5 factor -> string_constant [save_string] at(0,string_constant) [;]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [;]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [;]
	8 string_constant -> " str " [save_string] at(0,") [;]
648
	0 multiplicative_operator -> * [save_operator] at(1,) [;]
649
	0 multiplicative_operator -> / [save_operator] at(1,) [;]
650
	0 multiplicative_operator -> AND [save_operator] at(1,) [;]
651
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [;]
652
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [;]
653
	0 factor -> ( expression ) [save_factor] at(2,)) [;]
654
	0 string_constant -> " str " [save_string] at(2,") [;]
655
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(6,) [$]
656
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(6,block) [$]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [$]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [$]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [$]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [$]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [$]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [$]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [$]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [$]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [$]
657
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(3,parameter_list_ext) [$]
	1 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(0,,) [$]
658
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(7,;) [$]
659
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [$]
660
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [$]
661
	0 factor -> ( expression ) [save_factor] at(3,) [$]
662
	0 string_constant -> " str " [save_string] at(3,) [$]
663
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [.]
664
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [.]
665
	0 factor -> ( expression ) [save_factor] at(3,) [.]
666
	0 string_constant -> " str " [save_string] at(3,) [.]
667
	0 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(6,) [BEGIN]
668
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(6,block) [BEGIN]
	1 block -> declarations compound_statement [save_block,setscope_global] at(0,declarations) [BEGIN]
	2 declarations -> var_declaration declarations [save_declarations] at(0,var_declaration) [BEGIN]
	3 declarations -> procedure_declaration declarations [save_declarations,add_procedure] at(0,procedure_declaration) [BEGIN]
	4 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(1,compound_statement) [BEGIN]
	5 var_declaration -> VAR identifier : type ; var_declaration [save_var_declaration,check_variable_exists,add_variable] at(0,VAR) [BEGIN]
	6 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(1,declarations) [BEGIN]
	7 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(0,PROCEDURE) [BEGIN]
	8 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [BEGIN]
	9 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
669
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(3,parameter_list_ext) [BEGIN]
	1 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(0,,) [BEGIN]
670
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(7,;) [BEGIN]
671
	0 block -> declarations compound_statement [save_block,setscope_global] at(1,compound_statement) [BEGIN]
	1 declarations -> var_declaration declarations [save_declarations,reduce_epsilon(0)] at(2,) [BEGIN]
	2 compound_statement -> BEGIN statement_list END [save_compound_statement] at(0,BEGIN) [BEGIN]
672
	0 block -> declarations compound_statement [save_block,setscope_global,reduce_epsilon(0)] at(2,) [BEGIN]
673
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(1,statement_list) [BEGIN]
	1 statement_list -> statement [save_statement_list] at(0,statement) [BEGIN]
	2 statement_list -> statement statement_list_ext [save_statement_list] at(0,statement) [BEGIN]
	3 statement -> assignment [save_statement] at(0,assignment) [BEGIN]
	4 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [BEGIN]
674
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(3,type) [VAR,PROCEDURE,BEGIN]
	1 type -> INTEGER [save_type] at(0,INTEGER) [VAR,PROCEDURE,BEGIN]
	2 type -> REAL [save_type] at(0,REAL) [VAR,PROCEDURE,BEGIN]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [VAR,PROCEDURE,BEGIN]
	4 type -> STRING [save_type] at(0,STRING) [VAR,PROCEDURE,BEGIN]
675
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [VAR,PROCEDURE,BEGIN]
676
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [VAR,PROCEDURE,BEGIN]
677
	0 factor -> ( expression ) [save_factor] at(3,) [VAR,PROCEDURE,BEGIN]
678
	0 string_constant -> " str " [save_string] at(3,) [VAR,PROCEDURE,BEGIN]
679
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [;]
680
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [;]
681
	0 factor -> ( expression ) [save_factor] at(3,) [;]
682
	0 string_constant -> " str " [save_string] at(3,) [;]
683
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(7,;) [$]
684
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(4,) [$]
685
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(1,identifier) [$]
686
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(8,) [$]
687
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(7,;) [BEGIN]
688
	0 parameter_list -> identifier : type parameter_list_ext [save_parameter_list,add_procedure_parameters] at(4,) [BEGIN]
689
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(1,identifier) [BEGIN]
690
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local,reduce_epsilon(3)] at(8,) [BEGIN]
691
	0 block -> declarations compound_statement [save_block,setscope_global] at(2,) [BEGIN]
692
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(2,END) [BEGIN]
693
	0 statement_list -> statement [save_statement_list] at(1,) [BEGIN]
	1 statement_list -> statement statement_list_ext [save_statement_list] at(1,statement_list_ext) [BEGIN]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [BEGIN]
	3 statement_list -> statement statement_list_ext [save_statement_list,reduce_epsilon(1)] at(2,) [BEGIN]
694
	0 statement -> assignment [save_statement] at(1,) [BEGIN]
695
	0 assignment -> identifier := expression [save_assignment,assign_value] at(1,:=) [BEGIN]
696
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(4,parameter_list_ext) [VAR,PROCEDURE,BEGIN]
	1 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(0,,) [VAR,PROCEDURE,BEGIN]
697
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(8,) [$]
698
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(2,:) [$]
699
	0 procedure_declaration -> PROCEDURE identifier ( parameter_list ) ; block ; [save_procedure_declaration,check_procedure_exists,add_procedure,setscope_local] at(8,) [BEGIN]
700
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(2,:) [BEGIN]
701
	0 compound_statement -> BEGIN statement_list END [save_compound_statement] at(3,) [BEGIN]
702
	0 statement_list -> statement statement_list_ext [save_statement_list] at(2,) [BEGIN]
703
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(1,statement) [BEGIN]
	1 statement -> assignment [save_statement] at(0,assignment) [BEGIN]
	2 assignment -> identifier := expression [save_assignment,assign_value] at(0,identifier) [BEGIN]
704
	0 assignment -> identifier := expression [save_assignment,assign_value] at(2,expression) [BEGIN]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [BEGIN]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [BEGIN]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [BEGIN]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [BEGIN]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [BEGIN]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [BEGIN]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
	8 factor -> ( expression ) [save_factor] at(0,() [BEGIN]
	9 factor -> identifier [save_identifier] at(0,identifier) [BEGIN]
	10 factor -> number [save_number] at(0,number) [BEGIN]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [BEGIN]
	12 factor -> string_constant [save_string] at(0,string_constant) [BEGIN]
	13 additive_operator -> + [save_operator] at(0,+) [BEGIN]
	14 additive_operator -> - [save_operator] at(0,-) [BEGIN]
	15 additive_operator -> OR [save_operator] at(0,OR) [BEGIN]
	16 relational_operator -> = [save_operator] at(0,=) [BEGIN]
	17 relational_operator -> <> [save_operator] at(0,<>) [BEGIN]
	18 relational_operator -> < [save_operator] at(0,<) [BEGIN]
	19 relational_operator -> <= [save_operator] at(0,<=) [BEGIN]
	20 relational_operator -> > [save_operator] at(0,>) [BEGIN]
	21 relational_operator -> >= [save_operator] at(0,>=) [BEGIN]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [BEGIN]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [BEGIN]
	24 string_constant -> " str " [save_string] at(0,") [BEGIN]
705
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(5,) [VAR,PROCEDURE,BEGIN]
706
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(3,type) [$]
	1 type -> INTEGER [save_type] at(0,INTEGER) [$]
	2 type -> REAL [save_type] at(0,REAL) [$]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [$]
	4 type -> STRING [save_type] at(0,STRING) [$]
707
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(3,type) [BEGIN]
	1 type -> INTEGER [save_type] at(0,INTEGER) [BEGIN]
	2 type -> REAL [save_type] at(0,REAL) [BEGIN]
	3 type -> BOOLEAN' [save_type] at(0,BOOLEAN') [BEGIN]
	4 type -> STRING [save_type] at(0,STRING) [BEGIN]
708
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(2,statement_list_ext) [BEGIN]
	1 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(0,;) [BEGIN]
	2 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext,reduce_epsilon(2)] at(3,) [BEGIN]
709
	0 assignment -> identifier := expression [save_assignment,assign_value] at(3,) [BEGIN]
710
	0 expression -> simple_expression expression_ext [save_expression] at(1,expression_ext) [BEGIN]
	1 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [BEGIN]
	2 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(1)] at(2,) [BEGIN]
	3 relational_operator -> = [save_operator] at(0,=) [BEGIN]
	4 relational_operator -> <> [save_operator] at(0,<>) [BEGIN]
	5 relational_operator -> < [save_operator] at(0,<) [BEGIN]
	6 relational_operator -> <= [save_operator] at(0,<=) [BEGIN]
	7 relational_operator -> > [save_operator] at(0,>) [BEGIN]
	8 relational_operator -> >= [save_operator] at(0,>=) [BEGIN]
711
	0 simple_expression -> term additive_operator term [save_simple_expression] at(1,additive_operator) [BEGIN]
	1 additive_operator -> + [save_operator] at(0,+) [BEGIN]
	2 additive_operator -> - [save_operator] at(0,-) [BEGIN]
	3 additive_operator -> OR [save_operator] at(0,OR) [BEGIN]
712
	0 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(2,) [BEGIN]
713
	0 term -> factor multiplicative_operator factor [save_term] at(1,multiplicative_operator) [BEGIN]
	1 multiplicative_operator -> * [save_operator] at(0,*) [BEGIN]
	2 multiplicative_operator -> / [save_operator] at(0,/) [BEGIN]
	3 multiplicative_operator -> AND [save_operator] at(0,AND) [BEGIN]
714
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(2,term) [BEGIN]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [BEGIN]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [BEGIN]
	3 factor -> ( expression ) [save_factor] at(0,() [BEGIN]
	4 factor -> identifier [save_identifier] at(0,identifier) [BEGIN]
	5 factor -> number [save_number] at(0,number) [BEGIN]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [BEGIN]
	7 factor -> string_constant [save_string] at(0,string_constant) [BEGIN]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [BEGIN]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [BEGIN]
	10 string_constant -> " str " [save_string] at(0,") [BEGIN]
715
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(1,simple_expression) [BEGIN]
	1 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [BEGIN]
	2 expression_ext -> relational_operator simple_expression [save_expression_extension,reduce_epsilon(1)] at(2,) [BEGIN]
	3 term -> factor multiplicative_operator factor [save_term] at(0,factor) [BEGIN]
	4 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [BEGIN]
	5 factor -> ( expression ) [save_factor] at(0,() [BEGIN]
	6 factor -> identifier [save_identifier] at(0,identifier) [BEGIN]
	7 factor -> number [save_number] at(0,number) [BEGIN]
	8 factor -> boolean_constant [save_operator] at(0,boolean_constant) [BEGIN]
	9 factor -> string_constant [save_string] at(0,string_constant) [BEGIN]
	10 additive_operator -> + [save_operator] at(0,+) [BEGIN]
	11 additive_operator -> - [save_operator] at(0,-) [BEGIN]
	12 additive_operator -> OR [save_operator] at(0,OR) [BEGIN]
	13 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [BEGIN]
	14 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [BEGIN]
	15 string_constant -> " str " [save_string] at(0,") [BEGIN]
716
	0 factor -> ( expression ) [save_factor] at(1,expression) [BEGIN]
	1 expression -> simple_expression expression_ext [save_expression] at(0,simple_expression) [BEGIN]
	2 simple_expression -> term additive_operator term [save_simple_expression] at(0,term) [BEGIN]
	3 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0)] at(1,expression_ext) [BEGIN]
	4 term -> factor multiplicative_operator factor [save_term] at(0,factor) [BEGIN]
	5 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(1,additive_operator) [BEGIN]
	6 expression_ext -> relational_operator simple_expression [save_expression_extension] at(0,relational_operator) [BEGIN]
	7 expression -> simple_expression expression_ext [save_expression,reduce_epsilon(0),reduce_epsilon(1)] at(2,) [BEGIN]
	8 factor -> ( expression ) [save_factor] at(0,() [BEGIN]
	9 factor -> identifier [save_identifier] at(0,identifier) [BEGIN]
	10 factor -> number [save_number] at(0,number) [BEGIN]
	11 factor -> boolean_constant [save_operator] at(0,boolean_constant) [BEGIN]
	12 factor -> string_constant [save_string] at(0,string_constant) [BEGIN]
	13 additive_operator -> + [save_operator] at(0,+) [BEGIN]
	14 additive_operator -> - [save_operator] at(0,-) [BEGIN]
	15 additive_operator -> OR [save_operator] at(0,OR) [BEGIN]
	16 relational_operator -> = [save_operator] at(0,=) [BEGIN]
	17 relational_operator -> <> [save_operator] at(0,<>) [BEGIN]
	18 relational_operator -> < [save_operator] at(0,<) [BEGIN]
	19 relational_operator -> <= [save_operator] at(0,<=) [BEGIN]
	20 relational_operator -> > [save_operator] at(0,>) [BEGIN]
	21 relational_operator -> >= [save_operator] at(0,>=) [BEGIN]
	22 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [BEGIN]
	23 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [BEGIN]
	24 string_constant -> " str " [save_string] at(0,") [BEGIN]
717
	0 factor -> identifier [save_identifier] at(1,) [BEGIN]
718
	0 factor -> number [save_number] at(1,) [BEGIN]
719
	0 factor -> boolean_constant [save_operator] at(1,) [BEGIN]
720
	0 factor -> string_constant [save_string] at(1,) [BEGIN]
721
	0 additive_operator -> + [save_operator] at(1,) [BEGIN]
722
	0 additive_operator -> - [save_operator] at(1,) [BEGIN]
723
	0 additive_operator -> OR [save_operator] at(1,) [BEGIN]
724
	0 relational_operator -> = [save_operator] at(1,) [BEGIN]
725
	0 relational_operator -> <> [save_operator] at(1,) [BEGIN]
726
	0 relational_operator -> < [save_operator] at(1,) [BEGIN]
727
	0 relational_operator -> <= [save_operator] at(1,) [BEGIN]
728
	0 relational_operator -> > [save_operator] at(1,) [BEGIN]
729
	0 relational_operator -> >= [save_operator] at(1,) [BEGIN]
730
	0 boolean_constant -> TRUE [save_boolean] at(1,) [BEGIN]
731
	0 boolean_constant -> FALSE [save_boolean] at(1,) [BEGIN]
732
	0 string_constant -> " str " [save_string] at(1,str) [BEGIN]
733
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(4,parameter_list_ext) [$]
	1 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(0,,) [$]
734
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(4,parameter_list_ext) [BEGIN]
	1 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(0,,) [BEGIN]
735
	0 statement_list_ext -> ; statement statement_list_ext [save_statement_list_ext] at(3,) [BEGIN]
736
	0 expression -> simple_expression expression_ext [save_expression] at(2,) [BEGIN]
737
	0 simple_expression -> term additive_operator term [save_simple_expression] at(2,term) [BEGIN]
	1 term -> factor multiplicative_operator factor [save_term] at(0,factor) [BEGIN]
	2 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [BEGIN]
	3 factor -> ( expression ) [save_factor] at(0,() [BEGIN]
	4 factor -> identifier [save_identifier] at(0,identifier) [BEGIN]
	5 factor -> number [save_number] at(0,number) [BEGIN]
	6 factor -> boolean_constant [save_operator] at(0,boolean_constant) [BEGIN]
	7 factor -> string_constant [save_string] at(0,string_constant) [BEGIN]
	8 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [BEGIN]
	9 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [BEGIN]
	10 string_constant -> " str " [save_string] at(0,") [BEGIN]
738
	0 term -> factor multiplicative_operator factor [save_term] at(2,factor) [BEGIN]
	1 factor -> ( expression ) [save_factor] at(0,() [BEGIN]
	2 factor -> identifier [save_identifier] at(0,identifier) [BEGIN]
	3 factor -> number [save_number] at(0,number) [BEGIN]
	4 factor -> boolean_constant [save_operator] at(0,boolean_constant) [BEGIN]
	5 factor -> string_constant [save_string] at(0,string_constant) [BEGIN]
	6 boolean_constant -> TRUE [save_boolean] at(0,TRUE) [BEGIN]
	7 boolean_constant -> FALSE [save_boolean] at(0,FALSE) [BEGIN]
	8 string_constant -> " str " [save_string] at(0,") [BEGIN]
739
	0 multiplicative_operator -> * [save_operator] at(1,) [BEGIN]
740
	0 multiplicative_operator -> / [save_operator] at(1,) [BEGIN]
741
	0 multiplicative_operator -> AND [save_operator] at(1,) [BEGIN]
742
	0 simple_expression -> term additive_operator term [save_simple_expression,reduce_epsilon(0)] at(3,) [BEGIN]
743
	0 expression_ext -> relational_operator simple_expression [save_expression_extension] at(2,) [BEGIN]
744
	0 factor -> ( expression ) [save_factor] at(2,)) [BEGIN]
745
	0 string_constant -> " str " [save_string] at(2,") [BEGIN]
746
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(5,) [$]
747
	0 parameter_list_ext -> , identifier : type parameter_list_ext [save_parameter_list_ext,add_procedure_parameters] at(5,) [BEGIN]
748
	0 simple_expression -> term additive_operator term [save_simple_expression] at(3,) [BEGIN]
749
	0 term -> factor multiplicative_operator factor [save_term] at(3,) [BEGIN]
750
	0 factor -> ( expression ) [save_factor] at(3,) [BEGIN]
751
	0 string_constant -> " str " [save_string] at(3,) [BEGIN]
